theory composition_spdm begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, multiset
functions: fst/1, h/1, hkdf/4, hmac/2, pair/2, pk/1, sdec/2, senc/2,
           sid/2, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

tactic: cert_create
presort: s
prio: {id}
  regex"KU\(sign\(<~oid" | regex"KU\(~root" | regex"RootCert\("
prio: {id}
  regex"StateResp\(~tid.*\#i"





/*
looping facts with injective instances:
  KeyExchangeInit/17, KeyExchangeResp/15, StateInit/11, StateResp/11
*/











restriction OneSharedPSK:
  "∀ idI idR #i #j.
    ((OneSharePSK( idI, idR ) @ #i) ∧ (OneSharePSK( idI, idR ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OneSharedPK:
  "∀ idI idR #i #j.
    ((OneSharePK( idI, idR ) @ #i) ∧ (OneSharePK( idI, idR ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OneCertificate:
  "∀ id #i #j. ((OneCert( id ) @ #i) ∧ (OneCert( id ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction SingleRootCert:
  "∀ #i #j. ((RootOnce( ) @ #i) ∧ (RootOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction resetGetVersionInit:
  "∀ tid1 tid2 oidI oidR #i #j.
    (((StartThreadI( tid1, oidI, oidR ) @ #i) ∧
      (StartThreadI( tid2, oidI, oidR ) @ #j)) ∧
     (#i < #j)) ⇒
    (∀ #k. ((CurrentThreadI( tid1, oidI, oidR ) @ #k) ∧ (#j < #k)) ⇒ (⊥))"
  // safety formula

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction inequality:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

rule (modulo E) CreateRootCert[color=#f9c74f]:
   [ Fr( ~ltk ) ]
  --[ CreateRootCert( ~ltk ), RootOnce( ) ]->
   [ !RootCert( ~ltk ), !TrustAnchor( pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) createDevice:
   [
   Fr( ~oid ), In( capabilities ), Fr( ~measure ), In( <v1, v2> ),
   In( <a1, a2> )
   ]
  --[
  IsValidVersion( v1 ), IsValidVersion( v2 ), IsValidAlgo( a1 ),
  IsValidAlgo( a2 )
  ]->
   [
   !Device( ~oid, <v1, v2>, capabilities, <a1, a2> ),
   !Measurement( ~oid, ~measure ), Out( ~oid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) sharePSK:
   [
   !Device( ~oid1, V1, ('PSK'+C1), A1 ),
   !Device( ~oid2, V2, ('PSK'+C2), A2 ), Fr( ~key )
   ]
  --[ OneSharePSK( ~oid1, ~oid2 ), OneSharePSK( ~oid2, ~oid1 ) ]->
   [ !PSK( ~oid1, ~oid2, ~key ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) sharePK:
   [
   Fr( ~ltk1 ), Fr( ~ltk2 ), !Device( ~oid1, V1, C1, A1 ),
   !Device( ~oid2, V2, C2, A2 )
   ]
  --[
  OneSharePK( ~oid1, ~oid2 ), OneSharePK( ~oid2, ~oid1 ),
  SecretLtk( ~ltk1 ), SecretLtk( ~ltk2 )
  ]->
   [
   !SharedPK( ~oid1, ~oid2, pk(~ltk1), pk(~ltk2) ), !LTK( ~oid1, ~ltk1 ),
   !LTK( ~oid2, ~ltk2 ), Out( pk(~ltk1) ), Out( pk(~ltk2) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_getCertHonest:
   [ !Device( ~oid, V, C, A ), !RootCert( ~rootkey ), Fr( ~ltk ) ]
  --[
  OneCert( ~oid ), Honest( ~oid, ~ltk, pk(~ltk) ),
  GenDeviceCert( ~oid, pk(~ltk) )
  ]->
   [
   !LTK( ~oid, ~ltk ), !PK( ~oid, pk(~ltk) ),
   !Cert( ~oid, pk(~ltk), sign(<~oid, pk(~ltk)>, ~rootkey) ),
   Out( <pk(~ltk), sign(<~oid, pk(~ltk)>, ~rootkey)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) getCertAttacker:
   [ In( oid ), !RootCert( ~rootkey ), Fr( ~ltk ) ]
  --[ Attacker( oid, ~ltk, pk(~ltk) ), GenDeviceCert( oid, pk(~ltk) ) ]->
   [
   !PK( oid, pk(~ltk) ), Out( <~ltk, oid, sign(<oid, pk(~ltk)>, ~rootkey)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Version_FirstRequest[color=#2ec4b6]:
   [ !Device( ~oid, V, C, A ), !Device( ~oidR, VR, CR, AR ), Fr( ~tid ) ]
  --[
  Channel( ~oid, ~oidR ), StartThreadI( ~tid, ~oid, ~oidR ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  VCATranscriptI( (<'Algorithms', 'NULL'>+<'Capabilities', 'NULL'>+
                   <'Get_Capabilities', 'NULL'>+<'Get_Version', 'Get_Version', '1'>+
                   <'Negotiate_Algorithms', 'NULL'>+<'Version', 'NULL'>)
  )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, '1', 'NULL', <V, C, A>,
              (<'Algorithms', 'NULL'>+<'Capabilities', 'NULL'>+
               <'Get_Capabilities', 'NULL'>+<'Get_Version', 'Get_Version', '1'>+
               <'Negotiate_Algorithms', 'NULL'>+<'Version', 'NULL'>),
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              'NULL', 'NULL', 'START_GETVERSION'
   ),
   Out( <'Get_Version', '1'> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Version_FirstResponse[color=#2ec4b6]:
   [
   !Device( ~oid, V, C, A ), !Device( ~oidI, VI, CI, AI ), Fr( ~tid ),
   In( <'Get_Version', '1'> )
   ]
  --[
  StartThreadR( ~tid, ~oidI, ~oid ), CurrentThreadR( ~tid, ~oidI, ~oid ),
  VCATranscriptR( (<'Algorithms', 'NULL'>+<'Capabilities', 'NULL'>+
                   <'Get_Capabilities', 'NULL'>+<'Get_Version', 'Get_Version', '1'>+
                   <'Negotiate_Algorithms', 'NULL'>+<'Version', 'Version', V>)
  )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, '1', 'NULL', <V, C, A>,
              (<'Algorithms', 'NULL'>+<'Capabilities', 'NULL'>+
               <'Get_Capabilities', 'NULL'>+<'Get_Version', 'Get_Version', '1'>+
               <'Negotiate_Algorithms', 'NULL'>+<'Version', 'Version', V>),
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              'NULL', 'NULL', 'RESP_GETVERSION'
   ),
   Out( <'Version', V> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Capabilities_Request[color=#f9844a]:
   [
   StateInit( ~tid, ~oid, ~oidR, '1', 'NULL', <V, C, A>,
              (VCATranscript+<'Get_Capabilities', trash2>+<'Version', trash1>),
              optionsTranscript, 'NULL', 'NULL', 'START_GETVERSION'
   ),
   In( <'Version', VR> ), In( vx )
   ]
  --[
  IsIn( vx, V ), IsIn( vx, VR ), Version( ~tid, vx ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  VCATranscriptI( (VCATranscript+<'Get_Capabilities', trash2>+
                   <'Version', trash1>)
  )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Get_Capabilities', 'Get_Capabilities', vx, C>+
               <'Version', 'Version', VR>),
              optionsTranscript, 'NULL', 'NULL', 'START_GETCAP'
   ),
   Out( <'Get_Capabilities', vx, C> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Capabilities_Response[color=#f9844a]:
   [
   StateResp( ~tid, ~oidI, ~oid, '1', 'NULL', <V, C, A>,
              (VCATranscript+<'Capabilities', 'NULL'>+<'Get_Capabilities', 'NULL'>),
              optionsTranscript, 'NULL', 'NULL', 'RESP_GETVERSION'
   ),
   In( <'Get_Capabilities', vx, CI> )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadR( ~tid, ~oidI, ~oid ),
  VCATranscriptR( (VCATranscript+<'Capabilities', 'NULL'>+
                   <'Get_Capabilities', 'NULL'>)
  )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Capabilities', 'Capabilities', vx, C>+
               <'Get_Capabilities', 'Get_Capabilities', vx, CI>),
              optionsTranscript, 'NULL', 'NULL', 'RESP_GETCAPABILITIES'
   ),
   Out( <'Capabilities', vx, C> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Algorithms_Request[color=#f9844a]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Capabilities', 'NULL'>+<'Negotiate_Algorithms', 'NULL'>
              ),
              optionsTranscript, 'NULL', 'NULL', 'START_GETCAP'
   ),
   In( <'Capabilities', vx, CR> )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  VCATranscriptI( (VCATranscript+<'Capabilities', 'NULL'>+
                   <'Negotiate_Algorithms', 'NULL'>)
  )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Capabilities', 'Capabilities', vx, CR>+
               <'Negotiate_Algorithms', 'Negotiate_Algorithms', vx, A>),
              optionsTranscript, 'NULL', 'NULL', 'START_GETALGORITHMS'
   ),
   Out( <'Negotiate_Algorithms', vx, A> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Algorithms_Response[color=#f9844a]:
   [
   StateResp( ~tid, ~oidI, ~oid, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Algorithms', 'NULL'>+<'Negotiate_Algorithms', 'NULL'>),
              optionsTranscript, 'NULL', 'NULL', 'RESP_GETCAPABILITIES'
   ),
   In( <'Negotiate_Algorithms', vx, AI> ), In( ax )
   ]
  --[
  IsIn( ax, AI ), IsIn( ax, A ), Version( ~tid, vx ),
  CurrentThreadR( ~tid, ~oidI, ~oid ), RespReachVCA( ~tid, ~oidI, ~oid ),
  RespReachVCAoid( ~tid, ~oidI ),
  VCATranscriptR( (VCATranscript+<'Algorithms', 'NULL'>+
                   <'Negotiate_Algorithms', 'NULL'>)
  ),
  RStoredCert( ~tid, ~oidI, ~oid, 'NULL', 'NULL' )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>,
              (VCATranscript+<'Algorithms', 'Algorithms', vx, ax>+
               <'Negotiate_Algorithms', 'Negotiate_Algorithms', vx, AI>),
              optionsTranscript, 'NULL', 'NULL', 'IDLE'
   ),
   Out( <'Algorithms', vx, ax> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Algorithms_ProcessResponse[color=#f9844a]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, 'NULL', <V, C, A>,
              (VCATranscript+<'Algorithms', 'NULL'>), optionsTranscript, 'NULL',
              'NULL', 'START_GETALGORITHMS'
   ),
   In( <'Algorithms', vx, ax> )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  VCATranscriptI( (VCATranscript+<'Algorithms', 'NULL'>) ),
  InitReachVCA( ~tid, ~oid, ~oidR ),
  IStoredCert( ~tid, ~oid, ~oidR, 'NULL', 'NULL' )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>,
              (VCATranscript+<'Algorithms', 'Algorithms', vx, ax>), optionsTranscript,
              'NULL', 'NULL', 'IDLE'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Digest_Request[color=#577590]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Digest', getdig>), somepkR, digest, 'IDLE'
   )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  RequestDigest( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Digest', getdig>) ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Digest', 'Get_Digest', vx>), somepkR, digest,
              'START_DIGEST'
   ),
   Out( <'Get_Digest', vx> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Digest_Response[color=#577590]:
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', dig>+<'Get_Digest', getdig>), somepkI,
              digestI, 'IDLE'
   ),
   !Cert( ~oid, pk(~ltk), cert ), In( <'Get_Digest', vx> )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadR( ~tid, ~oidI, ~oid ),
  OptionTranscriptR( (optionsTranscript+<'Digest', dig>+
                      <'Get_Digest', getdig>)
  ),
  SendDigest( ~tid, ~oidI, ~oid, h(cert) ),
  RStoredCert( ~tid, ~oidI, ~oid, somepkI, digestI )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', 'Digest', vx, h(cert)>+
               <'Get_Digest', 'Get_Digest', vx>),
              somepkI, digestI, 'IDLE'
   ),
   Out( <'Digest', vx, h(cert)> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Digest_ReceiveUnknownDigest[color=#577590]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', dig>), somepkR, anyDigest, 'START_DIGEST'
   ),
   In( <'Digest', vx, h(somecert)> )
   ]
  --[
  Neq( h(somecert), anyDigest ), Version( ~tid, vx ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Digest', dig>) ),
  ReceiveDigest( ~tid, ~oid, ~oidR, h(somecert) ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, anyDigest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', 'Digest', vx, h(somecert)>), 'NULL',
              h(somecert), 'NEED_TO_START_CERTIFICATE'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Digest_ReceiveKnownDigest[color=#577590]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', 'NULL'>), somepkR, digest_stored,
              'START_DIGEST'
   ),
   In( <'Digest', vx, h(somecert)> )
   ]
  --[
  NotLoopOptions( ), Eq( digest_stored, h(somecert) ), Version( ~tid, vx ),
  OptionTranscriptI( (optionsTranscript+<'Digest', 'NULL'>) ),
  ReceiveDigest( ~tid, ~oid, ~oidR, h(somecert) ),
  CurrentThreadI( ~tid, ~oid, ~oidR ), Neq( digest_stored, 'NULL' ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest_stored )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Digest', 'Digest', vx, h(somecert)>), somepkR,
              digest_stored, 'IDLE'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Certificate_Request[color=#4d908e]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Certificate', getcert>), somepkR, digest,
              'NEED_TO_START_CERTIFICATE'
   )
   ]
  --[
  NoOldCert( ), Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  RequestCertificate( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Certificate', getcert>) ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Certificate', 'Get_Certificate', vx>), somepkR,
              digest, 'WAIT_FOR_CERTIFICATE'
   ),
   Out( <'Get_Certificate', vx> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Certificate_Request_new[color=#4d908e]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Certificate', getcert>), somepkR, digest, 'IDLE'
   )
   ]
  --[
  NoNewCert( ), Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  RequestCertificate( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Certificate', getcert>) ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Certificate', 'Get_Certificate', vx>), somepkR,
              digest, 'WAIT_FOR_CERTIFICATE'
   ),
   Out( <'Get_Certificate', vx> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_Certificate_Response[color=#4d908e]:
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Certificate', tcert>+<'Get_Certificate', getcert>),
              somepkI, digestI, 'IDLE'
   ),
   In( <'Get_Certificate', vx> ), !Cert( ~oid, pk(~ltk), cert )
   ]
  --[
  Version( ~tid, vx ), CurrentThreadR( ~tid, ~oidI, ~oid ),
  OptionTranscriptR( (optionsTranscript+<'Certificate', tcert>+
                      <'Get_Certificate', getcert>)
  ),
  SendCertificate( ~tid, ~oidI, ~oid, cert ),
  RStoredCert( ~tid, ~oidI, ~oid, somepkI, digestI )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Certificate', 'Certificate', vx, cert>+
               <'Get_Certificate', 'Get_Certificate', vx>),
              somepkI, digestI, 'IDLE'
   ),
   Out( <'Certificate', vx, cert> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Certificate_ProcessAndVerify[color=#4d908e]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Certificate', tcert>), somepkR, digest,
              'WAIT_FOR_CERTIFICATE'
   ),
   !RootCert( ~rootkey ),
   In( <'Certificate', vx, sign(<~oidR, pk(~ltk)>, ~rootkey)> )
   ]
  --[
  FinishCertificate( ~tid, ~oid, ~oidR, pk(~ltk),
                     sign(<~oidR, pk(~ltk)>, ~rootkey)
  ),
  Version( ~tid, vx ), ReceivePK( pk(~ltk), ~ltk ),
  CertificateKey( ~oidR, pk(~ltk), ~rootkey ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Certificate', tcert>) ),
  ReceiveCertificate( ~tid, ~oid, ~oidR, sign(<~oidR, pk(~ltk)>, ~rootkey)
  ),
  ReceiveCertificate2( ~tid, ~oid, ~oidR, pk(~ltk) ),
  IStoredCert( ~tid, ~oid, ~oidR, pk(~ltk), digest ),
  Eq( h(sign(<~oidR, pk(~ltk)>, ~rootkey)), digest ), NoOldCert( )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+
               <'Certificate', 'Certificate', vx, sign(<~oidR, pk(~ltk)>, ~rootkey)>),
              pk(~ltk), digest, 'IDLE'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Challenge_Request[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Challenge', getchal>), somepkR, digest, 'IDLE'
   ),
   Fr( ~nonce )
   ]
  --[
  NotLoopOptions( ), Neq( somepkR, 'NULL' ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Challenge', getchal>) ),
  RequestChallenge( ~tid, ~oid, ~oidR ), Version( ~tid, vx ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Challenge', 'Get_Challenge', vx, ~nonce>),
              somepkR, digest, 'START_CHALLENGE'
   ),
   Out( <'Get_Challenge', vx, ~nonce> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_Challenge_Response[color=#43aa8b]:
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Challenge', chal>+<'Get_Challenge', getchal>),
              somepkI, digestI, 'IDLE'
   ),
   !Cert( ~oid, pk(~ltkR), cert ), In( <'Get_Challenge', vx, nonce> )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ),
  CurrentThreadR( ~tid, ~oidI, ~oid ),
  OptionTranscriptR( (optionsTranscript+<'Challenge', chal>+
                      <'Get_Challenge', getchal>)
  ),
  SendChallenge( ~tid, ~oidI, ~oid,
                 sign(h(<vx, 'Responder_Signing', VCATranscript, 
                         (optionsTranscript+<'Challenge', 'Challenge', vx, 'NULL'>+
                          <'Get_Challenge', 'Get_Challenge', vx, nonce>)
                        >),
                      ~ltkR)
  ),
  RunningChallenge( ~tid, ~oid, ~ltkR ),
  RStoredCert( ~tid, ~oidI, ~oid, somepkI, digestI )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              somepkI, digestI, 'IDLE'
   ),
   Out( <'Challenge', vx, 
         sign(h(<vx, 'Responder_Signing', VCATranscript, 
                 (optionsTranscript+<'Challenge', 'Challenge', vx, 'NULL'>+
                  <'Get_Challenge', 'Get_Challenge', vx, nonce>)
                >),
              ~ltkR)
        >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Challenge_ProcessAndVerify[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Challenge', chal>), somepkR, digest,
              'START_CHALLENGE'
   ),
   In( <'Challenge', vx, sign(h(M1_transcript), ltkR)> ), In( vx )
   ]
  --[
  NotLoopOptions( ),
  Eq( verify(sign(h(M1_transcript), ltkR), h(M1_transcript), somepkR), true
  ),
  Eq( M1_transcript,
      <vx, 'Responder_Signing', VCATranscript, 
       (optionsTranscript+<'Challenge', 'Challenge', vx, 'NULL'>)>
  ),
  Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
  ReceiveChallenge( ~tid, ~oid, sign(h(M1_transcript), ltkR) ),
  SuccessChallenge( ~tid, ~oid, ~oidR, somepkR ),
  OptionTranscriptI( (optionsTranscript+<'Challenge', chal>) ),
  Neq( somepkR, 'NULL' ), IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              somepkR, digest, 'IDLE'
   )
   ]

  /*
  rule (modulo AC) I_Challenge_ProcessAndVerify[color=#43aa8b]:
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (optionsTranscript+<'Challenge', chal>), somepkR, digest,
                'START_CHALLENGE'
     ),
     In( <'Challenge', vx, sign(h(M1_transcript), ltkR)> ), In( vx )
     ]
    --[
    NotLoopOptions( ), Eq( z, true ),
    Eq( M1_transcript,
        <vx, 'Responder_Signing', VCATranscript, 
         (optionsTranscript+<'Challenge', 'Challenge', vx, 'NULL'>)>
    ),
    Version( ~tid, vx ), CurrentThreadI( ~tid, ~oid, ~oidR ),
    ReceiveChallenge( ~tid, ~oid, sign(h(M1_transcript), ltkR) ),
    SuccessChallenge( ~tid, ~oid, ~oidR, somepkR ),
    OptionTranscriptI( (optionsTranscript+<'Challenge', chal>) ),
    Neq( somepkR, 'NULL' ), IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
    ]->
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
                 <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
                 <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
                somepkR, digest, 'IDLE'
     )
     ]
    variants (modulo AC)
    1. M1_transcript
             = M1_transcript.36
       ltkR  = ltkR.42
       somepkR
             = somepkR.44
       z     = verify(sign(h(M1_transcript.36), ltkR.42), h(M1_transcript.36),
                      somepkR.44)
    
    2. ltkR  = ltkR.28
       somepkR
             = pk(ltkR.28)
       z     = true
  */

rule (modulo E) I_Measurement_Request[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', 'NULL'>), somepkR, digest, 'IDLE'
   ),
   Fr( ~nonce )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ), Neq( somepkR, 'NULL' ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Measurement', 'NULL'>) ),
  RequestMeasurement( ~tid, ~oid, ~oidR ),
  MeasurePk( ~tid, ~oid, ~oidR, somepkR ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', 'Get_Measurement', vx, ~nonce>),
              somepkR, digest, 'START_MEASUREMENT'
   ),
   Out( <'Get_Measurement', vx, ~nonce> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_Measurement_Response[color=#43aa8b]:
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              optionsTranscript, somepkI, digestI, 'IDLE'
   ),
   Fr( ~respNonce ), !LTK( ~oid, ~ltkR ), !Measurement( ~oid, ~measure ),
   In( <'Get_Measurement', vx, nonce> )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ),
  CurrentThreadR( ~tid, ~oidI, ~oid ),
  OptionTranscriptR( optionsTranscript ),
  SendMeasurement( ~tid, ~oidI, ~oid, ~ltkR,
                   sign(h(<vx, 'Measurement_Signing', VCATranscript, 
                           (<'Get_Measurement', 'Get_Measurement', vx, nonce>+
                            <'Measurement', 'Measurement', vx, ~measure, ~respNonce, 'NULL'>)
                          >),
                        ~ltkR)
  ),
  RStoredCert( ~tid, ~oidI, ~oid, somepkI, digestI )
  ]->
   [
   StateResp( ~tid, ~oidI, ~oid, vx, ax, <V, C, A>, VCATranscript,
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              somepkI, digestI, 'IDLE'
   ),
   Out( <'Measurement', vx, ~measure, ~respNonce, 
         sign(h(<vx, 'Measurement_Signing', VCATranscript, 
                 (<'Get_Measurement', 'Get_Measurement', vx, nonce>+
                  <'Measurement', 'Measurement', vx, ~measure, ~respNonce, 'NULL'>)
                >),
              ~ltkR)
        >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_Measurement_ProcessAndVerify[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', measTrancript>), somepkR, digest,
              'START_MEASUREMENT'
   ),
   In( <'Measurement', vx, measure_R, respNonce, 
        sign(h(L1_transcript), ~ltkR)>
   )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ),
  OptionTranscriptI( (optionsTranscript+<'Get_Measurement', measTrancript>)
  ),
  MeasurePk( ~tid, ~oid, ~oidR, somepkR ),
  ReceiveMeasurement( ~tid, ~oid, ~oidR, somepkR,
                      sign(h(L1_transcript), ~ltkR)
  ),
  CurrentThreadI( ~tid, ~oid, ~oidR ), Neq( somepkR, 'NULL' ),
  Eq( verify(sign(h(L1_transcript), ~ltkR), h(L1_transcript), somepkR),
      true
  ),
  Eq( L1_transcript,
      <vx, 'Measurement_Signing', VCATranscript, 
       (<'Get_Measurement', measTrancript>+
        <'Measurement', 'Measurement', vx, measure_R, respNonce, 'NULL'>)
      >
  ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              somepkR, digest, 'IDLE'
   )
   ]

  /*
  rule (modulo AC) I_Measurement_ProcessAndVerify[color=#43aa8b]:
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (optionsTranscript+<'Get_Measurement', measTrancript>), somepkR, digest,
                'START_MEASUREMENT'
     ),
     In( <'Measurement', vx, measure_R, respNonce, 
          sign(h(L1_transcript), ~ltkR)>
     )
     ]
    --[
    NotLoopOptions( ), Version( ~tid, vx ),
    OptionTranscriptI( (optionsTranscript+<'Get_Measurement', measTrancript>)
    ),
    MeasurePk( ~tid, ~oid, ~oidR, somepkR ),
    ReceiveMeasurement( ~tid, ~oid, ~oidR, somepkR,
                        sign(h(L1_transcript), ~ltkR)
    ),
    CurrentThreadI( ~tid, ~oid, ~oidR ), Neq( somepkR, 'NULL' ),
    Eq( z, true ),
    Eq( L1_transcript,
        <vx, 'Measurement_Signing', VCATranscript, 
         (<'Get_Measurement', measTrancript>+
          <'Measurement', 'Measurement', vx, measure_R, respNonce, 'NULL'>)
        >
    ),
    IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
    ]->
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
                 <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
                 <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
                somepkR, digest, 'IDLE'
     )
     ]
    variants (modulo AC)
    1. ~ltkR = ~ltkR.31
       somepkR
             = pk(~ltkR.31)
       z     = true
    
    2. ~ltkR = ~ltkR.46
       L1_transcript
             = L1_transcript.52
       somepkR
             = somepkR.61
       z     = verify(sign(h(L1_transcript.52), ~ltkR.46), h(L1_transcript.52),
                      somepkR.61)
  */

rule (modulo E) I_MeasurementSharedPK_Request[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', 'NULL'>), somepkR, digest, 'IDLE'
   ),
   Fr( ~nonce )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ), Eq( somepkR, 'NULL' ),
  RequestMeasurementPK( ~tid, ~oid, ~oidR ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  OptionTranscriptI( (optionsTranscript+<'Get_Measurement', 'NULL'>) ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', 'Get_Measurement', vx, ~nonce>),
              somepkR, digest, 'START_MEASUREMENT_PK'
   ),
   Out( <'Get_Measurement', vx, ~nonce> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_MeasurementSharedPK_ProcessAndVerify[color=#43aa8b]:
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (optionsTranscript+<'Get_Measurement', measTrancript>), somepkR, digest,
              'START_MEASUREMENT_PK'
   ),
   !SharedPK( ~oid, ~oidR, pkI, pkR ),
   In( <'Measurement', vx, measure_R, respNonce, 
        sign(h(L1_transcript), ~ltkR)>
   )
   ]
  --[
  NotLoopOptions( ), Version( ~tid, vx ),
  OptionTranscript( (optionsTranscript+<'Get_Measurement', measTrancript>)
  ),
  ReceiveMeasurement( ~tid, ~oid, ~oidR, pkR, sign(h(L1_transcript), ~ltkR)
  ),
  ReceiveMeasurementShared( ~tid, ~oid, ~oidR, pkR,
                            sign(h(L1_transcript), ~ltkR)
  ),
  CurrentThreadI( ~tid, ~oid, ~oidR ),
  Eq( verify(sign(h(L1_transcript), ~ltkR), h(L1_transcript), pkR), true ),
  Eq( L1_transcript,
      <vx, 'Measurement_Signing', VCATranscript, 
       (<'Get_Measurement', measTrancript>+
        <'Measurement', 'Measurement', vx, measure_R, respNonce, 'NULL'>)
      >
  ),
  IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
  ]->
   [
   StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
              (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
               <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
               <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
              somepkR, digest, 'IDLE'
   )
   ]

  /*
  rule (modulo AC) I_MeasurementSharedPK_ProcessAndVerify[color=#43aa8b]:
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (optionsTranscript+<'Get_Measurement', measTrancript>), somepkR, digest,
                'START_MEASUREMENT_PK'
     ),
     !SharedPK( ~oid, ~oidR, pkI, pkR ),
     In( <'Measurement', vx, measure_R, respNonce, 
          sign(h(L1_transcript), ~ltkR)>
     )
     ]
    --[
    NotLoopOptions( ), Version( ~tid, vx ),
    OptionTranscript( (optionsTranscript+<'Get_Measurement', measTrancript>)
    ),
    ReceiveMeasurement( ~tid, ~oid, ~oidR, pkR, sign(h(L1_transcript), ~ltkR)
    ),
    ReceiveMeasurementShared( ~tid, ~oid, ~oidR, pkR,
                              sign(h(L1_transcript), ~ltkR)
    ),
    CurrentThreadI( ~tid, ~oid, ~oidR ), Eq( z, true ),
    Eq( L1_transcript,
        <vx, 'Measurement_Signing', VCATranscript, 
         (<'Get_Measurement', measTrancript>+
          <'Measurement', 'Measurement', vx, measure_R, respNonce, 'NULL'>)
        >
    ),
    IStoredCert( ~tid, ~oid, ~oidR, somepkR, digest )
    ]->
     [
     StateInit( ~tid, ~oid, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                (<'Certificate', 'NULL'>+<'Challenge', 'NULL'>+<'Digest', 'NULL'>+
                 <'Get_Certificate', 'NULL'>+<'Get_Challenge', 'NULL'>+
                 <'Get_Digest', 'NULL'>+<'Get_Measurement', 'NULL'>),
                somepkR, digest, 'IDLE'
     )
     ]
    variants (modulo AC)
    1. ~ltkR = ~ltkR.33
       pkR   = pk(~ltkR.33)
       z     = true
    
    2. ~ltkR = ~ltkR.48
       L1_transcript
             = L1_transcript.54
       pkR   = pkR.63
       z     = verify(sign(h(L1_transcript.54), ~ltkR.48), h(L1_transcript.54),
                      pkR.63)
  */

rule (modulo E) I_Spawn_new_Session:
   [
   StateInit( ~tidI, ~oidI, ~oidR, version, axI, <VI, CI, AI>,
              VCATranscriptI, optionsTranscriptI, somePKR, digestR, 'IDLE'
   ),
   Fr( ~sid )
   ]
  --[
  Version( ~tidI, version ), CurrentThreadI( ~tidI, ~oidI, ~oidR ),
  IStartKEX( ~sid, ~tidI, ~oidI, ~oidR ),
  IStartKEX2( ~sid, ~tidI, ~oidI, ~oidR, somePKR, digestR ),
  KETranscriptI( (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                  <'Get_Key_Exchange', 'NULL'>+<'Get_PSK_Exchange', 'NULL'>+
                  <'Key_Exchange_Resp', 'NULL'>+<'PSK_Exchange_Resp', 'NULL'>+
                  <'PSK_Finish', 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
  ),
  OptionTranscriptI( optionsTranscriptI ),
  IStoredCert( ~tidI, ~oidI, ~oidR, somePKR, digestR )
  ]->
   [
   StateInit( ~tidI, ~oidI, ~oidR, version, axI, <VI, CI, AI>,
              VCATranscriptI, optionsTranscriptI, somePKR, digestR, 'IDLE'
   ),
   KeyExchangeInit( ~sid, ~tidI, ~oidI, ~oidR, somePKR, digestR, version,
                    VCATranscriptI,
                    (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+<'Get_Key_Exchange', 'NULL'>+
                     <'Get_PSK_Exchange', 'NULL'>+<'Key_Exchange_Resp', 'NULL'>+
                     <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                     <'PSK_Finish_Rsp', 'NULL'>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_Spawn_new_Session:
   [
   StateResp( ~tidR, ~oidI, ~oidR, version, axR, <VR, CR, AR>,
              VCATranscriptR, optionsTranscriptR, pubKI, digestI, 'IDLE'
   ),
   Fr( ~sid )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  RStartKEX( ~sid, ~tidR, ~oidI, ~oidR ),
  RStartSession( ~tidR, ~oidI, ~oidR ),
  KETranscriptR( (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                  <'Get_Key_Exchange', 'NULL'>+<'Get_PSK_Exchange', 'NULL'>+
                  <'Key_Exchange_Resp', 'NULL'>+<'PSK_Exchange_Resp', 'NULL'>+
                  <'PSK_Finish', 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
  ),
  RStoredCert( ~tidR, ~oidI, ~oidR, pubKI, digestI )
  ]->
   [
   StateResp( ~tidR, ~oidI, ~oidR, version, axR, <VR, CR, AR>,
              VCATranscriptR, optionsTranscriptR, pubKI, digestI, 'IDLE'
   ),
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, pubKI, digestI, version,
                    VCATranscriptR,
                    (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+<'Get_Key_Exchange', 'NULL'>+
                     <'Get_PSK_Exchange', 'NULL'>+<'Key_Exchange_Resp', 'NULL'>+
                     <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                     <'PSK_Finish_Rsp', 'NULL'>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) I_KE_Request[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI, (messageTranscript+<'Get_Key_Exchange', gke>), 'NULL',
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   Fr( ~nonce ), Fr( ~newPrivKey ), Fr( ~initSessionId )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  StartKeyExchange( ~sid, ~tid, ~oidI, ~oidR, ~initSessionId ),
  InitKeyExchangeCert( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Get_Key_Exchange', gke>) ),
  IStoredCert( ~tid, ~oidI, ~oidR, pkR, digestR )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, ~initSessionId, 
                      ~nonce, 'g'^~newPrivKey>
                    ),
                    ~newPrivKey, ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                    'WAIT_KEY_RESP'
   ),
   Out( <'Get_Key_Exchange', version, ~initSessionId, ~nonce, 
         'g'^~newPrivKey>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_KE_Response[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   !Cert( ~oidR, pk(~ltkR), certR ), Fr( ~respNonce ), Fr( ~respSessionId ),
   Fr( ~respPrivKey ),
   In( <'Get_Key_Exchange', version, initSessionId, nonce, publicKey> )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SendKEResponse( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
  RunningBeforeFinish( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkR) ),
  SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
  DHOutputResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR, publicKey^~respPrivKey ),
  KETranscriptR( (messageTranscript+<'Get_Key_Exchange', gke>+
                  <'Key_Exchange_Resp', ker>)
  ),
  RespKeyExchangeCert( ~sid, ~tidR, ~oidI, ~oidR,
                       hmac(publicKey^~respPrivKey, 'salt_o')
  ),
  RStoredCert( ~tidR, ~oidI, ~oidR, somepkI, somedigestI )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+
                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                      publicKey>+
                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                      'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                      sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                              (messageTranscript+
                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                publicKey>+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                              )
                             >),
                           ~ltkR), 
                      hmac(h(<VCATrancript, h(certR), 
                              (messageTranscript+
                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                publicKey>+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                        (messageTranscript+
                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                          nonce, publicKey>+
                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                          'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                        )
                                       >),
                                     ~ltkR), 
                                'NULL'>
                              )
                             >),
                           hkdf('cert',
                                hkdf('cert', hmac(publicKey^~respPrivKey, 'salt_o'),
                                     h(<VCATrancript, h(certR), 
                                        (messageTranscript+
                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                          nonce, publicKey>+
                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                          'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                          sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                                  h(certR), 
                                                  (messageTranscript+
                                                   <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                    initSessionId, nonce, publicKey>+
                                                   <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                    ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                    'g'^~respPrivKey, 'NULL', 'NULL'>
                                                  )
                                                 >),
                                               ~ltkR), 
                                          'NULL'>
                                        )
                                       >),
                                     'resp_hs_data'),
                                version, 'finished'))
                     >
                    ),
                    hkdf('cert', hmac(publicKey^~respPrivKey, 'salt_o'),
                         h(<VCATrancript, h(certR), 
                            (messageTranscript+
                             <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                              publicKey>+
                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                              'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                              sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                      (messageTranscript+
                                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                        nonce, publicKey>+
                                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                        'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                      )
                                     >),
                                   ~ltkR), 
                              'NULL'>
                            )
                           >),
                         'init_hs_data'),
                    hmac(publicKey^~respPrivKey, 'salt_o'),
                    hkdf('cert',
                         hkdf('cert', hmac(publicKey^~respPrivKey, 'salt_o'),
                              h(<VCATrancript, h(certR), 
                                 (messageTranscript+
                                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                   publicKey>+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                           (messageTranscript+
                                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                             nonce, publicKey>+
                                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                             ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                             'NULL', 'NULL'>
                                           )
                                          >),
                                        ~ltkR), 
                                   'NULL'>
                                 )
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    hkdf('cert',
                         hkdf('cert', hmac(publicKey^~respPrivKey, 'salt_o'),
                              h(<VCATrancript, h(certR), 
                                 (messageTranscript+
                                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                   publicKey>+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                           (messageTranscript+
                                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                             nonce, publicKey>+
                                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                             ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                             'NULL', 'NULL'>
                                           )
                                          >),
                                        ~ltkR), 
                                   'NULL'>
                                 )
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    sid(initSessionId, ~respSessionId), 'AFTER_KE'
   ),
   Out( <'Key_Exchange_Resp', version, ~respSessionId, 'No_Mutual_auth', 
         ~respNonce, 'g'^~respPrivKey, 
         sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                 (messageTranscript+
                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                   publicKey>+
                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                 )
                >),
              ~ltkR), 
         hmac(h(<VCATrancript, h(certR), 
                 (messageTranscript+
                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                   publicKey>+
                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                           (messageTranscript+
                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                             publicKey>+
                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                             'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                           )
                          >),
                        ~ltkR), 
                   'NULL'>
                 )
                >),
              hkdf('cert',
                   hkdf('cert', hmac(publicKey^~respPrivKey, 'salt_o'),
                        h(<VCATrancript, h(certR), 
                           (messageTranscript+
                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                             publicKey>+
                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                             'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                             sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                     (messageTranscript+
                                      <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                       publicKey>+
                                      <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                       'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                     )
                                    >),
                                  ~ltkR), 
                             'NULL'>
                           )
                          >),
                        'resp_hs_data'),
                   version, 'finished'))
        >
   )
   ]

  /*
  rule (modulo AC) R_KE_Response[color=#43aa8b]:
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                      version, VCATrancript,
                      (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                      'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
     ),
     !Cert( ~oidR, pk(~ltkR), certR ), Fr( ~respNonce ), Fr( ~respSessionId ),
     Fr( ~respPrivKey ),
     In( <'Get_Key_Exchange', version, initSessionId, nonce, publicKey> )
     ]
    --[
    Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
    SendKEResponse( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
    RunningBeforeFinish( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkR) ),
    SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
    DHOutputResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR, z ),
    KETranscriptR( (messageTranscript+<'Get_Key_Exchange', gke>+
                    <'Key_Exchange_Resp', ker>)
    ),
    RespKeyExchangeCert( ~sid, ~tidR, ~oidI, ~oidR, hmac(z, 'salt_o') ),
    RStoredCert( ~tidR, ~oidI, ~oidR, somepkI, somedigestI )
    ]->
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                      version, VCATrancript,
                      (messageTranscript+
                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                        publicKey>+
                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                        'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                        sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                (messageTranscript+
                                 <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                  publicKey>+
                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                  'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                )
                               >),
                             ~ltkR), 
                        hmac(h(<VCATrancript, h(certR), 
                                (messageTranscript+
                                 <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                  publicKey>+
                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                  'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                  sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                          (messageTranscript+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                            nonce, publicKey>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                            ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                            'NULL', 'NULL'>
                                          )
                                         >),
                                       ~ltkR), 
                                  'NULL'>
                                )
                               >),
                             hkdf('cert',
                                  hkdf('cert', hmac(z, 'salt_o'),
                                       h(<VCATrancript, h(certR), 
                                          (messageTranscript+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                            nonce, publicKey>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                            ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                            sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                                    h(certR), 
                                                    (messageTranscript+
                                                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                      initSessionId, nonce, publicKey>+
                                                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                      ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                      'g'^~respPrivKey, 'NULL', 'NULL'>
                                                    )
                                                   >),
                                                 ~ltkR), 
                                            'NULL'>
                                          )
                                         >),
                                       'resp_hs_data'),
                                  version, 'finished'))
                       >
                      ),
                      hkdf('cert', hmac(z, 'salt_o'),
                           h(<VCATrancript, h(certR), 
                              (messageTranscript+
                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                publicKey>+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                        (messageTranscript+
                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                          nonce, publicKey>+
                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                          'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                        )
                                       >),
                                     ~ltkR), 
                                'NULL'>
                              )
                             >),
                           'init_hs_data'),
                      hmac(z, 'salt_o'),
                      hkdf('cert',
                           hkdf('cert', hmac(z, 'salt_o'),
                                h(<VCATrancript, h(certR), 
                                   (messageTranscript+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                             (messageTranscript+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>
                                             )
                                            >),
                                          ~ltkR), 
                                     'NULL'>
                                   )
                                  >),
                                'resp_hs_data'),
                           version, 'finished'),
                      hkdf('cert',
                           hkdf('cert', hmac(z, 'salt_o'),
                                h(<VCATrancript, h(certR), 
                                   (messageTranscript+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                             (messageTranscript+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>
                                             )
                                            >),
                                          ~ltkR), 
                                     'NULL'>
                                   )
                                  >),
                                'init_hs_data'),
                           version, 'finished'),
                      sid(initSessionId, ~respSessionId), 'AFTER_KE'
     ),
     Out( <'Key_Exchange_Resp', version, ~respSessionId, 'No_Mutual_auth', 
           ~respNonce, 'g'^~respPrivKey, 
           sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                   (messageTranscript+
                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                     publicKey>+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                   )
                  >),
                ~ltkR), 
           hmac(h(<VCATrancript, h(certR), 
                   (messageTranscript+
                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                     publicKey>+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                             (messageTranscript+
                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                               publicKey>+
                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                               'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                             )
                            >),
                          ~ltkR), 
                     'NULL'>
                   )
                  >),
                hkdf('cert',
                     hkdf('cert', hmac(z, 'salt_o'),
                          h(<VCATrancript, h(certR), 
                             (messageTranscript+
                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                               publicKey>+
                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                               'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                               sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, h(certR), 
                                       (messageTranscript+
                                        <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                         nonce, publicKey>+
                                        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                         'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                       )
                                      >),
                                    ~ltkR), 
                               'NULL'>
                             )
                            >),
                          'resp_hs_data'),
                     version, 'finished'))
          >
     )
     ]
    variants (modulo AC)
    1. ~respPrivKey
             = ~respPrivKey.41
       publicKey
             = publicKey.52
       z     = publicKey.52^~respPrivKey.41
    
    2. ~respPrivKey
             = ~respPrivKey.53
       publicKey
             = z.76^inv(~respPrivKey.53)
       z     = z.76
    
    3. ~respPrivKey
             = ~respPrivKey.487
       publicKey
             = x.967^x.968
       z     = x.967^(~respPrivKey.487*x.968)
    
    4. ~respPrivKey
             = ~respPrivKey.498
       publicKey
             = x.989^inv((~respPrivKey.498*x.990))
       z     = x.989^inv(x.990)
    
    5. ~respPrivKey
             = ~respPrivKey.498
       publicKey
             = x.989^(x.990*inv(~respPrivKey.498))
       z     = x.989^x.990
    
    6. ~respPrivKey
             = ~respPrivKey.499
       publicKey
             = x.990^(x.991*inv((~respPrivKey.499*x.992)))
       z     = x.990^(x.991*inv(x.992))
    
    7. publicKey
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) I_KE_ProcessAndVerify[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATrancriptI, (messageTranscript+<'Key_Exchange_Resp', rsp>), ~privKey,
                    ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'WAIT_KEY_RESP'
   ),
   In( <'Key_Exchange_Resp', version, respSessionId, 'No_Mutual_auth', 
        respNonce, respPublicKey, sign(h(K1_Transcript_Sign), ~ltkR), 
        hmac(h(K1_Transcript_HMAC), in_finished_key)>
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
  ReceiveKeyExchange( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Key_Exchange_Resp', rsp>) ),
  DHOutputInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, respPublicKey^~privKey
  ),
  CommitBeforeFinish( ~sid, ~tid, ~oidI, ~oidR, somepkR ),
  Eq( verify(sign(h(K1_Transcript_Sign), ~ltkR), h(K1_Transcript_Sign),
             somepkR),
      true
  ),
  Eq( K1_Transcript_Sign,
      <version, 'Key_Exchange_Resp_Signing', VCATrancriptI, digestR, 
       (messageTranscript+
        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
         'No_Mutual_auth', respNonce, respPublicKey, 'NULL', 'NULL'>
       )
      >
  ),
  Eq( in_finished_key,
      hkdf('cert',
           hkdf('cert', hmac(respPublicKey^~privKey, 'salt_o'),
                h(<VCATrancriptI, digestR, 
                   (messageTranscript+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                     'No_Mutual_auth', respNonce, respPublicKey, 
                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                   )
                  >),
                'resp_hs_data'),
           version, 'finished')
  ),
  Eq( K1_Transcript_HMAC,
      <VCATrancriptI, digestR, 
       (messageTranscript+
        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
         'No_Mutual_auth', respNonce, respPublicKey, 
         sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
       )
      >
  ),
  InitAcceptKeyExchangeCert( ~sid, ~tid, ~oidI, ~oidR,
                             hmac(respPublicKey^~privKey, 'salt_o')
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                      'No_Mutual_auth', respNonce, respPublicKey, 
                      sign(h(K1_Transcript_Sign), ~ltkR), 
                      hmac(h(K1_Transcript_HMAC), in_finished_key)>
                    ),
                    ~privKey, ~initSessionId,
                    hkdf('cert', hmac(respPublicKey^~privKey, 'salt_o'),
                         h(<VCATrancriptI, digestR, 
                            (messageTranscript+
                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                              'No_Mutual_auth', respNonce, respPublicKey, 
                              sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                            )
                           >),
                         'init_hs_data'),
                    hmac(respPublicKey^~privKey, 'salt_o'),
                    hkdf('cert',
                         hkdf('cert', hmac(respPublicKey^~privKey, 'salt_o'),
                              h(<VCATrancriptI, digestR, 
                                 (messageTranscript+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                   'No_Mutual_auth', respNonce, respPublicKey, 
                                   sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                 )
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    hkdf('cert',
                         hkdf('cert', hmac(respPublicKey^~privKey, 'salt_o'),
                              h(<VCATrancriptI, digestR, 
                                 (messageTranscript+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                   'No_Mutual_auth', respNonce, respPublicKey, 
                                   sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                 )
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    sid(~initSessionId, respSessionId), 'AFTER_KE'
   )
   ]

  /*
  rule (modulo AC) I_KE_ProcessAndVerify[color=#43aa8b]:
     [
     KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                      VCATrancriptI, (messageTranscript+<'Key_Exchange_Resp', rsp>), ~privKey,
                      ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'WAIT_KEY_RESP'
     ),
     In( <'Key_Exchange_Resp', version, respSessionId, 'No_Mutual_auth', 
          respNonce, respPublicKey, sign(h(K1_Transcript_Sign), ~ltkR), 
          hmac(h(K1_Transcript_HMAC), in_finished_key)>
     )
     ]
    --[
    Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
    SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
    ReceiveKeyExchange( ~sid, ~tid, ~oidI, ~oidR ),
    KETranscriptI( (messageTranscript+<'Key_Exchange_Resp', rsp>) ),
    DHOutputInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, z ),
    CommitBeforeFinish( ~sid, ~tid, ~oidI, ~oidR, somepkR ), Eq( z.1, true ),
    Eq( K1_Transcript_Sign,
        <version, 'Key_Exchange_Resp_Signing', VCATrancriptI, digestR, 
         (messageTranscript+
          <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
           'No_Mutual_auth', respNonce, respPublicKey, 'NULL', 'NULL'>
         )
        >
    ),
    Eq( in_finished_key,
        hkdf('cert',
             hkdf('cert', hmac(z, 'salt_o'),
                  h(<VCATrancriptI, digestR, 
                     (messageTranscript+
                      <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                       'No_Mutual_auth', respNonce, respPublicKey, 
                       sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                     )
                    >),
                  'resp_hs_data'),
             version, 'finished')
    ),
    Eq( K1_Transcript_HMAC,
        <VCATrancriptI, digestR, 
         (messageTranscript+
          <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
           'No_Mutual_auth', respNonce, respPublicKey, 
           sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
         )
        >
    ),
    InitAcceptKeyExchangeCert( ~sid, ~tid, ~oidI, ~oidR, hmac(z, 'salt_o') ),
    IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR )
    ]->
     [
     KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                      VCATrancriptI,
                      (messageTranscript+
                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                        'No_Mutual_auth', respNonce, respPublicKey, 
                        sign(h(K1_Transcript_Sign), ~ltkR), 
                        hmac(h(K1_Transcript_HMAC), in_finished_key)>
                      ),
                      ~privKey, ~initSessionId,
                      hkdf('cert', hmac(z, 'salt_o'),
                           h(<VCATrancriptI, digestR, 
                              (messageTranscript+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                'No_Mutual_auth', respNonce, respPublicKey, 
                                sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                              )
                             >),
                           'init_hs_data'),
                      hmac(z, 'salt_o'),
                      hkdf('cert',
                           hkdf('cert', hmac(z, 'salt_o'),
                                h(<VCATrancriptI, digestR, 
                                   (messageTranscript+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                     'No_Mutual_auth', respNonce, respPublicKey, 
                                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                   )
                                  >),
                                'init_hs_data'),
                           version, 'finished'),
                      hkdf('cert',
                           hkdf('cert', hmac(z, 'salt_o'),
                                h(<VCATrancriptI, digestR, 
                                   (messageTranscript+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                     'No_Mutual_auth', respNonce, respPublicKey, 
                                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                   )
                                  >),
                                'resp_hs_data'),
                           version, 'finished'),
                      sid(~initSessionId, respSessionId), 'AFTER_KE'
     )
     ]
    variants (modulo AC)
     1. ~ltkR = ~ltkR.33
        respPublicKey
              = DH_neutral
        somepkR
              = pk(~ltkR.33)
        z     = DH_neutral
        z.1   = true
    
     2. ~ltkR = ~ltkR.46
        ~privKey
              = ~privKey.49
        respPublicKey
              = respPublicKey.59
        somepkR
              = pk(~ltkR.46)
        z     = respPublicKey.59^~privKey.49
        z.1   = true
    
     3. ~ltkR = ~ltkR.49
        ~privKey
              = ~privKey.52
        K1_Transcript_Sign
              = K1_Transcript_Sign.56
        respPublicKey
              = respPublicKey.62
        somepkR
              = somepkR.65
        z     = respPublicKey.62^~privKey.52
        z.1   = verify(sign(h(K1_Transcript_Sign.56), ~ltkR.49),
                       h(K1_Transcript_Sign.56), somepkR.65)
    
     4. ~ltkR = ~ltkR.49
        K1_Transcript_Sign
              = K1_Transcript_Sign.56
        respPublicKey
              = DH_neutral
        somepkR
              = somepkR.65
        z     = DH_neutral
        z.1   = verify(sign(h(K1_Transcript_Sign.56), ~ltkR.49),
                       h(K1_Transcript_Sign.56), somepkR.65)
    
     5. ~ltkR = ~ltkR.56
        ~privKey
              = ~privKey.59
        K1_Transcript_Sign
              = K1_Transcript_Sign.63
        respPublicKey
              = z.79^inv(~privKey.59)
        somepkR
              = somepkR.72
        z     = z.79
        z.1   = verify(sign(h(K1_Transcript_Sign.63), ~ltkR.56),
                       h(K1_Transcript_Sign.63), somepkR.72)
    
     6. ~ltkR = ~ltkR.56
        ~privKey
              = ~privKey.59
        respPublicKey
              = z.79^inv(~privKey.59)
        somepkR
              = pk(~ltkR.56)
        z     = z.79
        z.1   = true
    
     7. ~ltkR = ~ltkR.344
        ~privKey
              = ~privKey.347
        K1_Transcript_Sign
              = K1_Transcript_Sign.351
        respPublicKey
              = x.684^x.685
        somepkR
              = somepkR.360
        z     = x.684^(~privKey.347*x.685)
        z.1   = verify(sign(h(K1_Transcript_Sign.351), ~ltkR.344),
                       h(K1_Transcript_Sign.351), somepkR.360)
    
     8. ~ltkR = ~ltkR.354
        ~privKey
              = ~privKey.357
        K1_Transcript_Sign
              = K1_Transcript_Sign.361
        respPublicKey
              = x.704^inv((~privKey.357*x.705))
        somepkR
              = somepkR.370
        z     = x.704^inv(x.705)
        z.1   = verify(sign(h(K1_Transcript_Sign.361), ~ltkR.354),
                       h(K1_Transcript_Sign.361), somepkR.370)
    
     9. ~ltkR = ~ltkR.354
        ~privKey
              = ~privKey.357
        K1_Transcript_Sign
              = K1_Transcript_Sign.361
        respPublicKey
              = x.704^(x.705*inv(~privKey.357))
        somepkR
              = somepkR.370
        z     = x.704^x.705
        z.1   = verify(sign(h(K1_Transcript_Sign.361), ~ltkR.354),
                       h(K1_Transcript_Sign.361), somepkR.370)
    
    10. ~ltkR = ~ltkR.355
        ~privKey
              = ~privKey.358
        K1_Transcript_Sign
              = K1_Transcript_Sign.362
        respPublicKey
              = x.705^(x.706*inv((~privKey.358*x.707)))
        somepkR
              = somepkR.371
        z     = x.705^(x.706*inv(x.707))
        z.1   = verify(sign(h(K1_Transcript_Sign.362), ~ltkR.355),
                       h(K1_Transcript_Sign.362), somepkR.371)
    
    11. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^x.711
        somepkR
              = pk(~ltkR.357)
        z     = x.710^(~privKey.360*x.711)
        z.1   = true
    
    12. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^inv((~privKey.360*x.711))
        somepkR
              = pk(~ltkR.357)
        z     = x.710^inv(x.711)
        z.1   = true
    
    13. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^(x.711*inv(~privKey.360))
        somepkR
              = pk(~ltkR.357)
        z     = x.710^x.711
        z.1   = true
    
    14. ~ltkR = ~ltkR.358
        ~privKey
              = ~privKey.361
        respPublicKey
              = x.711^(x.712*inv((~privKey.361*x.713)))
        somepkR
              = pk(~ltkR.358)
        z     = x.711^(x.712*inv(x.713))
        z.1   = true
  */

rule (modulo E) I_DeliverEncap_SendDigest[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'AFTER_KE'
   ),
   !Cert( ~oidI, pk(~ltkI), certI )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  SendEncapsulatedDigest( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( messageTranscript ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR ), NoOldCert( )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'SENT_DIGEST'
   ),
   Out( <'Deliver_Encap_Digest', version, h(certI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_EncapsResponseAck_RecvDigestGetCertificate[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript, messageTranscript, init_handshake_secret,
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'AFTER_KE'
   ),
   In( <'Deliver_Encap_Digest', version, digest_init> )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ),
  ReceivedEncapsulatedDigest( ~sid, ~tidR, ~oidI, ~oidR ),
  KETranscriptR( messageTranscript ),
  RStoredCert( ~tidR, ~oidI, ~oidR, somepkI, somedigestI ), NoOldCert( )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, 'NULL', digest_init, version,
                    VCATrancript, messageTranscript, init_handshake_secret, handshake_secret,
                    resp_finished_key, init_finished_key, bindSid, 'ACK_DIGEST'
   ),
   Out( <'Encap_Ack_GetCertificate', version> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_DeliverEncap_SendCertificate[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'SENT_DIGEST'
   ),
   In( <'Encap_Ack_GetCertificate', version> ),
   !Cert( ~oidI, pk(~ltkI), certI )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  SendEncapsulatedCertificate( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( messageTranscript ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR ), NoOldCert( )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'READY_MUTAUTH'
   ),
   Out( <'Deliver_Encap_Certificate', version, certI> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_EncapsResponseAck_RecvCertificate[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                    version, VCATrancript, messageTranscript, init_handshake_secret,
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'ACK_DIGEST'
   ),
   !RootCert( ~rootKey ),
   StateResp( ~tidR, ~oidI, ~oidR, version, somealg, <VR, CR, AR>,
              someVCATranscriptR, someoptionsTranscriptR, somepubKI, somedigestI,
              'IDLE'
   ),
   In( <'Deliver_Encap_Digest', version, sign(<~oidI, pk(~ltkI)>, ~rootKey)>
   )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ),
  ReceiveInitCertificate( ~sid, ~tidR, ~oidI, ~oidR ),
  KETranscriptR( messageTranscript ),
  RStoredCert( ~tidR, ~oidI, ~oidR, somepubKI, somedigestI ),
  Eq( h(sign(<~oidI, pk(~ltkI)>, ~rootKey)), digest_init )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkI), digest_init,
                    version, VCATrancript, messageTranscript, init_handshake_secret,
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'READY_MUTAUTH'
   ),
   StateResp( ~tidR, ~oidI, ~oidR, version, somealg, <VR, CR, AR>,
              someVCATranscriptR, someoptionsTranscriptR, pk(~ltkI), digest_init,
              'IDLE'
   ),
   Out( <'Encap_Ack', version> )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) I_AuthWithOldCert_BeforeFinish[color=#43aa88]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'AFTER_KE'
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ), KETranscriptI( messageTranscript ),
  IBeforeAuthOldCert( ~sid, ~tid, ~oidI, ~oidR ), Neq( somepkR, 'NULL' ),
  Neq( digest, 'NULL' ), IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                    init_handshake_secret, handshake_secret, init_finished_key,
                    resp_finished_key, bindSid, 'READY_MUTAUTH'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_AuthWithOldCert_BeforeFinish[color=#43aa88]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                    version, VCATrancript, messageTranscript, init_handshake_secret,
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'AFTER_KE'
   )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ), KETranscriptR( messageTranscript ),
  RBeforeAuthOldCert( ~sid, ~tidR, ~oidI, ~oidR ), Neq( somepkI, 'NULL' ),
  Neq( digest_init, 'NULL' ),
  RStoredCert( ~tidR, ~oidI, ~oidR, somepkI, digest_init )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                    version, VCATrancript, messageTranscript, init_handshake_secret,
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'READY_MUTAUTH'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Finish_Request[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript, (messageTranscript+<'Finish', f>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  StartFinishKE( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Finish', f>) ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript,
                    (messageTranscript+
                     <'Finish', 'Finish', version, 
                      hmac(h(<VCATranscript, digest, 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>)>),
                           init_finished_key)
                     >
                    ),
                    ~privKey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'PROCESS_FINISH_REQUEST'
   ),
   Out( <'Finish', version, 
         hmac(h(<VCATranscript, digest, 
                 (messageTranscript+<'Finish', 'Finish', version, 'NULL'>)>),
              init_finished_key)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Finish_Response[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>),
                    init_handshake_secret, handshake_secret, resp_finished_key,
                    init_finished_key, bindSid, 'AFTER_KE'
   ),
   !Cert( ~oidR, pk(~ltkR), certR ),
   In( <'Finish', version, hmac(h(K2_Transcript_HMAC), in_finished_key)> ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  RespFinish( ~sid, ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ),
  KETranscriptR( (messageTranscript+<'Finish', 'NULL'>+
                  <'Finish_Rsp', 'NULL'>)
  ),
  SesssionMajorSecretResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR,
                           handshake_secret
  ),
  Running( ~sid, ~tidR, pk(~ltkR), handshake_secret,
           (messageTranscript+
            <'Finish', 'Finish', version, 
             hmac(h(K2_Transcript_HMAC), in_finished_key)>+
            <'Finish_Rsp', 'Finish_Rsp', version, 
             hmac(h(<VCATrancript, h(certR), 
                     (messageTranscript+
                      <'Finish', 'Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', version, 'NULL'>)
                    >),
                  resp_finished_key)
            >
           ),
           'Resp'
  ),
  KeyUpdate( ~tidR, ~sid, ~kuid ),
  Eq( init_finished_key, in_finished_key ),
  Eq( <VCATrancript, h(certR), 
       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
        <'Finish_Rsp', 'NULL'>)
      >,
      K2_Transcript_HMAC
  )
  ]->
   [
   !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(certR), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', version, 'NULL'>)
                              >),
                            resp_finished_key)
                      >
                     ),
                     'resp_app_data'),
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(certR), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', version, 'NULL'>)
                              >),
                            resp_finished_key)
                      >
                     ),
                     'init_app_data'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(certR), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', version, 'NULL'>)
                                   >),
                                 resp_finished_key)
                           >
                          ),
                          'resp_app_data'),
                     version, 'key'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(certR), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', version, 'NULL'>)
                                   >),
                                 resp_finished_key)
                           >
                          ),
                          'init_app_data'),
                     version, 'key'),
                'Resp'
   ),
   Out( <'Finish_Rsp', version, 
         hmac(h(<VCATrancript, h(certR), 
                 (messageTranscript+
                  <'Finish', 'Finish', version, 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', version, 'NULL'>)
                >),
              resp_finished_key)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Finish_ProcessAndVerify[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript, (messageTranscript+<'Finish_Rsp', 'NULL'>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'PROCESS_FINISH_REQUEST'
   ),
   !Cert( ~oidI, pk(~ltkI), certI ),
   In( <'Finish_Rsp', version, hmac(h(K1_Transcript_HMAC), in_finished_key)>
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  ReceiveFinish( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Finish_Rsp', 'NULL'>) ),
  SesssionMajorSecretInit( ~sid, ~tid, ~oidI, ~oidR, somepkR,
                           handshake_secret
  ),
  Commit( ~sid, ~tid, pk(~ltkI), somepkR, handshake_secret,
          (messageTranscript+
           <'Finish_Rsp', 'Finish_Rsp', version, 
            hmac(h(K1_Transcript_HMAC), in_finished_key)>
          ),
          'Init'
  ),
  KeyUpdate( ~tid, ~sid, ~kuid ), Eq( in_finished_key, resp_finished_key ),
  Eq( K1_Transcript_HMAC,
      <VCATranscript, digest, 
       (messageTranscript+<'Finish_Rsp', version, 'NULL'>)>
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   !AppDataKey( ~kuid, ~tid, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'init_app_data'),
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'resp_app_data'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'init_app_data'),
                     version, 'key'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'resp_app_data'),
                     version, 'key'),
                'Init'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_FinishMutualAuth_Request[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript,
                    (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'READY_MUTAUTH'
   ),
   !Cert( ~oidI, pk(~ltkI), certI ), In( <'Encap_Ack', version> )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  ReceivedACK( ~sid, ~tid, ~oidI, ~oidR ),
  StartFinishKEMutualAuth( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Finish', 'NULL'>+
                  <'Finish_Rsp', 'NULL'>)
  ),
  RunningMutAuth( ~sid, ~tid, pk(~ltkI), somepkR, handshake_secret,
                  (messageTranscript+
                   <'Finish', 'Finish', version, 
                    sign(h(<VCATranscript, digest, 
                            (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                             <'Finish_Rsp', 'NULL'>), 
                            h(certI)>),
                         ~ltkI), 
                    hmac(h(<VCATranscript, digest, 
                            (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                             <'Finish_Rsp', 'NULL'>), 
                            h(certI), 
                            sign(h(<VCATranscript, digest, 
                                    (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                     <'Finish_Rsp', 'NULL'>), 
                                    h(certI)>),
                                 ~ltkI)
                           >),
                         init_finished_key)
                   >+
                   <'Finish_Rsp', 'NULL'>),
                  'Init'
  ),
  RunningMutAuthAll( ~sid, ~tid, handshake_secret,
                     (messageTranscript+
                      <'Finish', 'Finish', version, 
                       sign(h(<VCATranscript, digest, 
                               (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                <'Finish_Rsp', 'NULL'>), 
                               h(certI)>),
                            ~ltkI), 
                       hmac(h(<VCATranscript, digest, 
                               (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                <'Finish_Rsp', 'NULL'>), 
                               h(certI), 
                               sign(h(<VCATranscript, digest, 
                                       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                        <'Finish_Rsp', 'NULL'>), 
                                       h(certI)>),
                                    ~ltkI)
                              >),
                            init_finished_key)
                      >+
                      <'Finish_Rsp', 'NULL'>),
                     'Init'
  ),
  InitRequestPSKFinishPK( ~sid, ~tid, ~oidI, ~oidR, handshake_secret ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATranscript,
                    (messageTranscript+
                     <'Finish', 'Finish', version, 
                      sign(h(<VCATranscript, digest, 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(certI)>),
                           ~ltkI), 
                      hmac(h(<VCATranscript, digest, 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(certI), 
                              sign(h(<VCATranscript, digest, 
                                      (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                       <'Finish_Rsp', 'NULL'>), 
                                      h(certI)>),
                                   ~ltkI)
                             >),
                           init_finished_key)
                     >+
                     <'Finish_Rsp', 'NULL'>),
                    ~privKey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid,
                    'PROCESS_FINISH_REQUEST_AUTH'
   ),
   Out( <'Finish', version, 
         sign(h(<VCATranscript, digest, 
                 (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                  <'Finish_Rsp', 'NULL'>), 
                 h(certI)>),
              ~ltkI), 
         hmac(h(<VCATranscript, digest, 
                 (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                  <'Finish_Rsp', 'NULL'>), 
                 h(certI), 
                 sign(h(<VCATranscript, digest, 
                         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                          <'Finish_Rsp', 'NULL'>), 
                         h(certI)>),
                      ~ltkI)
                >),
              init_finished_key)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_FinishMutualAuth_Response[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                    version, VCATrancript,
                    (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>),
                    init_handshake_secret, handshake_secret, resp_finished_key,
                    init_finished_key, bindSid, 'READY_MUTAUTH'
   ),
   !Cert( ~oidR, pk(~ltkR), certR ),
   In( <'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
        hmac(h(K2_Transcript_HMAC), in_finished_key)>
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ), StartAppData( ~sid, bindSid ),
  RespFinishMutualAuth1( ~sid, ~tidR, ~oidI, ~oidR ),
  KETranscriptR( (messageTranscript+<'Finish', 'NULL'>+
                  <'Finish_Rsp', 'NULL'>)
  ),
  SesssionMajorSecretResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR,
                           handshake_secret
  ),
  SesssionMajorSecretRespAuth( ~sid, ~tidR, ~oidI, ~oidR, somepkI,
                               handshake_secret
  ),
  RunningMutAuth( ~sid, ~tidR, pk(~ltkR), somepkI, handshake_secret,
                  (messageTranscript+
                   <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                    hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                   <'Finish_Rsp', 'Finish_Rsp', version, 
                    hmac(h(<VCATrancript, h(certR), 
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                            digest_init>),
                         resp_finished_key)
                   >
                  ),
                  'Resp'
  ),
  CommitMutAuth( ~sid, ~tidR, pk(~ltkR), somepkI, handshake_secret,
                 (messageTranscript+
                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', 'NULL'>),
                 'Resp'
  ),
  RunningMutAuthAll( ~sid, ~tidR, handshake_secret,
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(certR), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                               digest_init>),
                            resp_finished_key)
                      >
                     ),
                     'Resp'
  ),
  CommitMutAuthAll( ~sid, ~tidR, handshake_secret,
                    (messageTranscript+
                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                     <'Finish_Rsp', 'NULL'>),
                    'Resp'
  ),
  KeyUpdate( ~tidR, ~sid, ~kuid ),
  Eq( verify(sign(h(K2_Transcript_sign), ~ltkI), h(K2_Transcript_sign),
             somepkI),
      true
  ),
  Eq( init_finished_key, in_finished_key ),
  Eq( <VCATrancript, h(certR), 
       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
        <'Finish_Rsp', 'NULL'>), 
       digest_init, sign(h(K2_Transcript_sign), ~ltkI)>,
      K2_Transcript_HMAC
  ),
  Eq( <VCATrancript, h(certR), 
       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
        <'Finish_Rsp', 'NULL'>), 
       digest_init>,
      K2_Transcript_sign
  ),
  RespAcceptPSKFinishPK( ~sid, ~tidR, ~oidI, ~oidR, handshake_secret )
  ]->
   [
   !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(certR), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                               digest_init>),
                            resp_finished_key)
                      >
                     ),
                     'resp_app_data'),
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(certR), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                               digest_init>),
                            resp_finished_key)
                      >
                     ),
                     'init_app_data'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(certR), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                    digest_init>),
                                 resp_finished_key)
                           >
                          ),
                          'resp_app_data'),
                     version, 'key'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(certR), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                    digest_init>),
                                 resp_finished_key)
                           >
                          ),
                          'init_app_data'),
                     version, 'key'),
                'Resp'
   ),
   Out( <'Finish_Rsp', version, 
         hmac(h(<VCATrancript, h(certR), 
                 (messageTranscript+
                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                 digest_init>),
              resp_finished_key)
        >
   )
   ]

  /*
  rule (modulo AC) R_FinishMutualAuth_Response[color=#43aa8b]:
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                      version, VCATrancript,
                      (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>),
                      init_handshake_secret, handshake_secret, resp_finished_key,
                      init_finished_key, bindSid, 'READY_MUTAUTH'
     ),
     !Cert( ~oidR, pk(~ltkR), certR ),
     In( <'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
          hmac(h(K2_Transcript_HMAC), in_finished_key)>
     ),
     Fr( ~kuid )
     ]
    --[
    Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
    SessionId( ~tidR, ~sid, bindSid ), StartAppData( ~sid, bindSid ),
    RespFinishMutualAuth1( ~sid, ~tidR, ~oidI, ~oidR ),
    KETranscriptR( (messageTranscript+<'Finish', 'NULL'>+
                    <'Finish_Rsp', 'NULL'>)
    ),
    SesssionMajorSecretResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR,
                             handshake_secret
    ),
    SesssionMajorSecretRespAuth( ~sid, ~tidR, ~oidI, ~oidR, somepkI,
                                 handshake_secret
    ),
    RunningMutAuth( ~sid, ~tidR, pk(~ltkR), somepkI, handshake_secret,
                    (messageTranscript+
                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                     <'Finish_Rsp', 'Finish_Rsp', version, 
                      hmac(h(<VCATrancript, h(certR), 
                              (messageTranscript+
                               <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                               <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                              digest_init>),
                           resp_finished_key)
                     >
                    ),
                    'Resp'
    ),
    CommitMutAuth( ~sid, ~tidR, pk(~ltkR), somepkI, handshake_secret,
                   (messageTranscript+
                    <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                     hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                    <'Finish_Rsp', 'NULL'>),
                   'Resp'
    ),
    RunningMutAuthAll( ~sid, ~tidR, handshake_secret,
                       (messageTranscript+
                        <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                         hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                        <'Finish_Rsp', 'Finish_Rsp', version, 
                         hmac(h(<VCATrancript, h(certR), 
                                 (messageTranscript+
                                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                 digest_init>),
                              resp_finished_key)
                        >
                       ),
                       'Resp'
    ),
    CommitMutAuthAll( ~sid, ~tidR, handshake_secret,
                      (messageTranscript+
                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                       <'Finish_Rsp', 'NULL'>),
                      'Resp'
    ),
    KeyUpdate( ~tidR, ~sid, ~kuid ), Eq( z, true ),
    Eq( init_finished_key, in_finished_key ),
    Eq( <VCATrancript, h(certR), 
         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
          <'Finish_Rsp', 'NULL'>), 
         digest_init, sign(h(K2_Transcript_sign), ~ltkI)>,
        K2_Transcript_HMAC
    ),
    Eq( <VCATrancript, h(certR), 
         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
          <'Finish_Rsp', 'NULL'>), 
         digest_init>,
        K2_Transcript_sign
    ),
    RespAcceptPSKFinishPK( ~sid, ~tidR, ~oidI, ~oidR, handshake_secret )
    ]->
     [
     !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                  hkdf('cert',
                       hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                       (messageTranscript+
                        <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                         hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                        <'Finish_Rsp', 'Finish_Rsp', version, 
                         hmac(h(<VCATrancript, h(certR), 
                                 (messageTranscript+
                                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                 digest_init>),
                              resp_finished_key)
                        >
                       ),
                       'resp_app_data'),
                  hkdf('cert',
                       hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                       (messageTranscript+
                        <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                         hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                        <'Finish_Rsp', 'Finish_Rsp', version, 
                         hmac(h(<VCATrancript, h(certR), 
                                 (messageTranscript+
                                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                 digest_init>),
                              resp_finished_key)
                        >
                       ),
                       'init_app_data'),
                  hkdf('cert',
                       hkdf('cert',
                            hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(<VCATrancript, h(certR), 
                                      (messageTranscript+
                                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                       <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                      digest_init>),
                                   resp_finished_key)
                             >
                            ),
                            'resp_app_data'),
                       version, 'key'),
                  hkdf('cert',
                       hkdf('cert',
                            hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(<VCATrancript, h(certR), 
                                      (messageTranscript+
                                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                       <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                      digest_init>),
                                   resp_finished_key)
                             >
                            ),
                            'init_app_data'),
                       version, 'key'),
                  'Resp'
     ),
     Out( <'Finish_Rsp', version, 
           hmac(h(<VCATrancript, h(certR), 
                   (messageTranscript+
                    <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~ltkI), 
                     hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                    <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                   digest_init>),
                resp_finished_key)
          >
     )
     ]
    variants (modulo AC)
    1. ~ltkI = ~ltkI.35
       somepkI
             = pk(~ltkI.35)
       z     = true
    
    2. ~ltkI = ~ltkI.53
       K2_Transcript_sign
             = K2_Transcript_sign.60
       somepkI
             = somepkI.71
       z     = verify(sign(h(K2_Transcript_sign.60), ~ltkI.53),
                      h(K2_Transcript_sign.60), somepkI.71)
  */

rule (modulo E) I_FinishMutualAuth_ProcessAndVerify[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, (messageTranscript+<'Finish_Rsp', 'NULL'>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid,
                    'PROCESS_FINISH_REQUEST_AUTH'
   ),
   !Cert( ~oidI, pk(~ltkI), certI ),
   In( <'Finish_Rsp', version, hmac(h(K1_Transcript_HMAC), in_finished_key)>
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  InitFinishMutualAuth( ~sid, ~tid, ~oidI, ~oidR ),
  SesssionMajorSecretInit( ~sid, ~tid, ~oidI, ~oidR, somepkR,
                           handshake_secret
  ),
  CommitMutAuth( ~sid, ~tid, pk(~ltkI), somepkR, handshake_secret,
                 (messageTranscript+
                  <'Finish_Rsp', 'Finish_Rsp', version, 
                   hmac(h(K1_Transcript_HMAC), in_finished_key)>
                 ),
                 'Init'
  ),
  CommitMutAuthAll( ~sid, ~tid, handshake_secret,
                    (messageTranscript+
                     <'Finish_Rsp', 'Finish_Rsp', version, 
                      hmac(h(K1_Transcript_HMAC), in_finished_key)>
                    ),
                    'Init'
  ),
  KeyUpdate( ~tid, ~sid, ~kuid ), Eq( in_finished_key, resp_finished_key ),
  Eq( K1_Transcript_HMAC,
      <VCATranscript, digestR, 
       (messageTranscript+<'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
       h(certI)>
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR )
  ]->
   [
   !AppDataKey( ~kuid, ~tid, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'init_app_data'),
                hkdf('cert',
                     hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'resp_app_data'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'init_app_data'),
                     version, 'key'),
                hkdf('cert',
                     hkdf('cert',
                          hmac(hkdf('cert', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'resp_app_data'),
                     version, 'key'),
                'Init'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_PSK_Request[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI, (messageTranscript+<'Get_PSK_Exchange', gke>), 'NULL',
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   Fr( ~initNonce ), Fr( ~initSessionId )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  StartKeyExchange( ~sid, ~tid, ~oidI, ~oidR, ~initSessionId ),
  KETranscriptI( (messageTranscript+<'Get_PSK_Exchange', gke>) ),
  IStoredCert( ~tid, ~oidI, ~oidR, pkR, digestR )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, ~initSessionId, 
                      ~initNonce>
                    ),
                    'NULL', ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                    'WAIT_KEY_RESP'
   ),
   Out( <'Get_PSK_Exchange', version, ~initSessionId, ~initNonce> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_PSK_Response_WithoutNonce[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+<'Get_PSK_Exchange', gke>+<'PSK_Exchange_Resp', ker>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   !PSK( ~oidI, ~oidR, ~key ), Fr( ~kuid ), Fr( ~respSessionId ),
   In( <'Get_PSK_Exchange', version, initSessionId, initNonce> )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SendKEResponse2( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
  SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
  KETranscriptR( (messageTranscript+<'Get_PSK_Exchange', gke>+
                  <'PSK_Exchange_Resp', ker>)
  )
  ]->
   [
   !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR,
                sid(initSessionId, ~respSessionId), version,
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                          '0_filled'),
                     (messageTranscript+
                      <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                       initNonce>+
                      <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                       'NULL', 
                       hmac(h(<VCATrancript, 
                               (messageTranscript+
                                <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                 initNonce>+
                                <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                 'NULL', 'NULL'>
                               )
                              >),
                            hkdf('pre_psk',
                                 hkdf('pre_psk', hmac(~key, 'salt_o'),
                                      h(<VCATrancript, 
                                         (messageTranscript+
                                          <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                           initNonce>+
                                          <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                           'NULL', 'NULL'>
                                         )
                                        >),
                                      'resp_hs_data'),
                                 version, 'finished'))
                      >
                     ),
                     'resp_app_data'),
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                          '0_filled'),
                     (messageTranscript+
                      <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                       initNonce>+
                      <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                       'NULL', 
                       hmac(h(<VCATrancript, 
                               (messageTranscript+
                                <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                 initNonce>+
                                <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                 'NULL', 'NULL'>
                               )
                              >),
                            hkdf('pre_psk',
                                 hkdf('pre_psk', hmac(~key, 'salt_o'),
                                      h(<VCATrancript, 
                                         (messageTranscript+
                                          <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                           initNonce>+
                                          <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                           'NULL', 'NULL'>
                                         )
                                        >),
                                      'resp_hs_data'),
                                 version, 'finished'))
                      >
                     ),
                     'init_app_data'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                               '0_filled'),
                          (messageTranscript+
                           <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                            initNonce>+
                           <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                            'NULL', 
                            hmac(h(<VCATrancript, 
                                    (messageTranscript+
                                     <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                      initNonce>+
                                     <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                      'NULL', 'NULL'>
                                    )
                                   >),
                                 hkdf('pre_psk',
                                      hkdf('pre_psk', hmac(~key, 'salt_o'),
                                           h(<VCATrancript, 
                                              (messageTranscript+
                                               <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, 
                                                initSessionId, initNonce>+
                                               <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, 
                                                ~respSessionId, 'NULL', 'NULL'>
                                              )
                                             >),
                                           'resp_hs_data'),
                                      version, 'finished'))
                           >
                          ),
                          'init_app_data'),
                     version, 'key'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                               '0_filled'),
                          (messageTranscript+
                           <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                            initNonce>+
                           <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                            'NULL', 
                            hmac(h(<VCATrancript, 
                                    (messageTranscript+
                                     <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                      initNonce>+
                                     <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                      'NULL', 'NULL'>
                                    )
                                   >),
                                 hkdf('pre_psk',
                                      hkdf('pre_psk', hmac(~key, 'salt_o'),
                                           h(<VCATrancript, 
                                              (messageTranscript+
                                               <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, 
                                                initSessionId, initNonce>+
                                               <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, 
                                                ~respSessionId, 'NULL', 'NULL'>
                                              )
                                             >),
                                           'resp_hs_data'),
                                      version, 'finished'))
                           >
                          ),
                          'resp_app_data'),
                     version, 'key'),
                'Resp'
   ),
   Out( senc(<'PSK_Exchange_Resp', version, ~respSessionId, 'NULL', 
              hmac(h(<VCATrancript, 
                      (messageTranscript+
                       <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                        initNonce>+
                       <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                        'NULL', 'NULL'>
                      )
                     >),
                   hkdf('pre_psk',
                        hkdf('pre_psk', hmac(~key, 'salt_o'),
                             h(<VCATrancript, 
                                (messageTranscript+
                                 <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                  initNonce>+
                                 <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                  'NULL', 'NULL'>
                                )
                               >),
                             'resp_hs_data'),
                        version, 'finished'))
             >,
             hkdf('pre_psk',
                  hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                       '0_filled'),
                  (messageTranscript+
                   <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                    initNonce>+
                   <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                    'NULL', 
                    hmac(h(<VCATrancript, 
                            (messageTranscript+
                             <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                              initNonce>+
                             <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                              'NULL', 'NULL'>
                            )
                           >),
                         hkdf('pre_psk',
                              hkdf('pre_psk', hmac(~key, 'salt_o'),
                                   h(<VCATrancript, 
                                      (messageTranscript+
                                       <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                        initNonce>+
                                       <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                        'NULL', 'NULL'>
                                      )
                                     >),
                                   'resp_hs_data'),
                              version, 'finished'))
                   >
                  ),
                  'resp_app_data'))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_PSK_ProcessAndVerify[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript+<'PSK_Exchange_Resp', rsp>+<'PSK_Finish', 'NULL'>),
                    'NULL', ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                    'WAIT_KEY_RESP'
   ),
   !PSK( ~oidI, ~oidR, ~key ), Fr( ~kuid ),
   In( senc(<'PSK_Exchange_Resp', version, respSessionId, 'NULL', 
             hmac(h(K1_Transcript_HMAC), in_finished_key)>,
            resp_master_secret)
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
  ReceiveKeyExchange2( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'PSK_Exchange_Resp', rsp>+
                  <'PSK_Finish', 'NULL'>)
  ),
  Eq( in_finished_key,
      hkdf('pre_psk',
           hkdf('pre_psk', hmac(~key, 'salt_o'),
                h(<VCATrancriptI, 
                   (messageTranscript+
                    <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                     'NULL', 'NULL'>+
                    <'PSK_Finish', 'NULL'>)
                  >),
                'resp_hs_data'),
           version, 'finished')
  ),
  Eq( K1_Transcript_HMAC,
      <VCATrancriptI, 
       (messageTranscript+
        <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
         'NULL', 'NULL'>+
        <'PSK_Finish', 'NULL'>)
      >
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   !AppDataKey( ~kuid, ~tid, ~sid, ~oidI, ~oidR,
                sid(~initSessionId, respSessionId), version,
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                          '0_filled'),
                     (messageTranscript+
                      <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                       'NULL', hmac(h(K1_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish', 'NULL'>),
                     'init_app_data'),
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                          '0_filled'),
                     (messageTranscript+
                      <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                       'NULL', hmac(h(K1_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish', 'NULL'>),
                     'resp_app_data'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                               '0_filled'),
                          (messageTranscript+
                           <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                            'NULL', hmac(h(K1_Transcript_HMAC), in_finished_key)>+
                           <'PSK_Finish', 'NULL'>),
                          'init_app_data'),
                     version, 'key'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', hmac(~key, 'salt_o'), version, 'derived'),
                               '0_filled'),
                          (messageTranscript+
                           <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                            'NULL', hmac(h(K1_Transcript_HMAC), in_finished_key)>+
                           <'PSK_Finish', 'NULL'>),
                          'resp_app_data'),
                     version, 'key'),
                'Init'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_PSK_Response_withNonce[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+<'Get_PSK_Exchange', gke>+<'PSK_Exchange_Resp', ker>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   !PSK( ~oidI, ~oidR, ~key ), Fr( ~respNonce ), Fr( ~respSessionId ),
   In( <'Get_PSK_Exchange', version, initSessionId, initNonce> )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SendKEResponse( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
  SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
  KETranscriptR( (messageTranscript+<'Get_PSK_Exchange', gke>+
                  <'PSK_Exchange_Resp', ker>)
  )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+
                     <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                      initNonce>+
                     <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                      ~respNonce, 
                      hmac(h(<VCATrancript, 
                              (messageTranscript+
                               <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                initNonce>+
                               <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                ~respNonce, 'NULL'>
                              )
                             >),
                           hkdf('pre_psk',
                                hkdf('pre_psk', hmac(~key, 'salt_o'),
                                     h(<VCATrancript, 
                                        (messageTranscript+
                                         <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                          initNonce>+
                                         <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                          ~respNonce, 'NULL'>
                                        )
                                       >),
                                     'resp_hs_data'),
                                version, 'finished'))
                     >
                    ),
                    hkdf('pre_psk', hmac(~key, 'salt_o'),
                         h(<VCATrancript, 
                            (messageTranscript+
                             <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                              initNonce>+
                             <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                              ~respNonce, 'NULL'>
                            )
                           >),
                         'init_hs_data'),
                    hmac(~key, 'salt_o'),
                    hkdf('pre_psk',
                         hkdf('pre_psk', hmac(~key, 'salt_o'),
                              h(<VCATrancript, 
                                 (messageTranscript+
                                  <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                   initNonce>+
                                  <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                   ~respNonce, 'NULL'>
                                 )
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    hkdf('pre_psk',
                         hkdf('pre_psk', hmac(~key, 'salt_o'),
                              h(<VCATrancript, 
                                 (messageTranscript+
                                  <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                   initNonce>+
                                  <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                   ~respNonce, 'NULL'>
                                 )
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    sid(initSessionId, ~respSessionId), 'AFTER_KE'
   ),
   Out( senc(<'PSK_Exchange_Resp', version, ~respSessionId, ~respNonce, 
              hmac(h(<VCATrancript, 
                      (messageTranscript+
                       <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                        initNonce>+
                       <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                        ~respNonce, 'NULL'>
                      )
                     >),
                   hkdf('pre_psk',
                        hkdf('pre_psk', hmac(~key, 'salt_o'),
                             h(<VCATrancript, 
                                (messageTranscript+
                                 <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                                  initNonce>+
                                 <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                                  ~respNonce, 'NULL'>
                                )
                               >),
                             'resp_hs_data'),
                        version, 'finished'))
             >,
             hkdf('pre_psk', hmac(~key, 'salt_o'),
                  h(<VCATrancript, 
                     (messageTranscript+
                      <'Get_PSK_Exchange', 'Get_PSK_Exchange', version, initSessionId, 
                       initNonce>+
                      <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, ~respSessionId, 
                       ~respNonce, 'NULL'>
                     )
                    >),
                  'resp_hs_data'))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_PSK_ProcessAndVerify_withNonce[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript+<'PSK_Exchange_Resp', rsp>+<'PSK_Finish', 'NULL'>),
                    'NULL', ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                    'WAIT_KEY_RESP'
   ),
   !PSK( ~oidI, ~oidR, ~key ),
   In( senc(<'PSK_Exchange_Resp', version, respSessionId, respNonce, 
             hmac(h(K1_Transcript_HMAC), in_finished_key)>,
            resp_handshake_secret)
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
  ReceiveKeyExchange( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'PSK_Exchange_Resp', rsp>+
                  <'PSK_Finish', 'NULL'>)
  ),
  Eq( in_finished_key,
      hkdf('pre_psk',
           hkdf('pre_psk', hmac(~key, 'salt_o'),
                h(<VCATrancriptI, 
                   (messageTranscript+
                    <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                     respNonce, 'NULL'>+
                    <'PSK_Finish', 'NULL'>)
                  >),
                'resp_hs_data'),
           version, 'finished')
  ),
  Eq( K1_Transcript_HMAC,
      <VCATrancriptI, 
       (messageTranscript+
        <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
         respNonce, 'NULL'>+
        <'PSK_Finish', 'NULL'>)
      >
  ),
  Neq( respNonce, 'NULL' ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                      respNonce, hmac(h(K1_Transcript_HMAC), in_finished_key)>+
                     <'PSK_Finish', 'NULL'>),
                    'NULL', ~initSessionId,
                    hkdf('pre_psk', hmac(~key, 'salt_o'),
                         h(<VCATrancriptI, 
                            (messageTranscript+
                             <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                              respNonce, 'NULL'>+
                             <'PSK_Finish', 'NULL'>)
                           >),
                         'init_hs_data'),
                    hmac(~key, 'salt_o'),
                    hkdf('pre_psk',
                         hkdf('pre_psk', hmac(~key, 'salt_o'),
                              h(<VCATrancriptI, 
                                 (messageTranscript+
                                  <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                                   respNonce, 'NULL'>+
                                  <'PSK_Finish', 'NULL'>)
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    hkdf('pre_psk',
                         hkdf('pre_psk', hmac(~key, 'salt_o'),
                              h(<VCATrancriptI, 
                                 (messageTranscript+
                                  <'PSK_Exchange_Resp', 'PSK_Exchange_Resp', version, respSessionId, 
                                   respNonce, 'NULL'>+
                                  <'PSK_Finish', 'NULL'>)
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    sid(~initSessionId, respSessionId), 'AFTER_KE'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_PSK_Finish[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                     <'PSK_Exchange_Resp', ker>+<'PSK_Finish', f>),
                    someprivKey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  StartFinishKEMutualAuth( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                  <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>)
  ),
  RunningMutAuthPSK( ~sid, ~tid, handshake_secret,
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(<VCATrancriptI, 
                               (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                                <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'PSK_Finish', version, 'NULL'>)
                              >),
                            init_finished_key)
                      >
                     ),
                     'Init'
  ),
  RunningMutAuthAll( ~sid, ~tid, handshake_secret,
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(<VCATrancriptI, 
                               (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                                <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'PSK_Finish', version, 'NULL'>)
                              >),
                            init_finished_key)
                      >
                     ),
                     'Init'
  ),
  InitRequestPSKFinish( ~sid, ~tid, ~oidI, ~oidR, handshake_secret ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                     <'PSK_Exchange_Resp', ker>+
                     <'PSK_Finish', 'PSK_Finish', version, 
                      hmac(h(<VCATrancriptI, 
                              (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                               <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'PSK_Finish', version, 'NULL'>)
                             >),
                           init_finished_key)
                     >
                    ),
                    someprivKey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'FINISH_PSK'
   ),
   Out( senc(<'PSK_Finish', version, 
              hmac(h(<VCATrancriptI, 
                      (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                       <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'PSK_Finish', version, 'NULL'>)
                     >),
                   init_finished_key)
             >,
             init_handshake_secret)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_FinishPSK_Response[color=#43aa8b]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                    version, VCATrancript,
                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                     <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>+
                     <'PSK_Finish_Rsp', 'NULL'>),
                    init_handshake_secret, handshake_secret, resp_finished_key,
                    init_finished_key, bindSid, 'AFTER_KE'
   ),
   !PSK( ~oidI, ~oidR, ~key ),
   In( senc(<'PSK_Finish', version, 
             hmac(h(K2_Transcript_HMAC), in_finished_key)>,
            init_handshake_secret)
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ), StartAppData( ~sid, bindSid ),
  RespFinishMutualAuth1( ~sid, ~tidR, ~oidI, ~oidR ),
  KETranscriptR( (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                  <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>+
                  <'PSK_Finish_Rsp', 'NULL'>)
  ),
  RunningMutAuthPSK( ~sid, ~tidR, handshake_secret,
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                     'Resp'
  ),
  CommitMutAuthPSK( ~sid, ~tidR, handshake_secret,
                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                     <'PSK_Exchange_Resp', ker>+
                     <'PSK_Finish', 'PSK_Finish', version, 
                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                     <'PSK_Finish_Rsp', 'NULL'>),
                    'Resp'
  ),
  RunningMutAuthAll( ~sid, ~tidR, handshake_secret,
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                     'Resp'
  ),
  CommitMutAuthAll( ~sid, ~tidR, handshake_secret,
                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                     <'PSK_Exchange_Resp', ker>+
                     <'PSK_Finish', 'PSK_Finish', version, 
                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                     <'PSK_Finish_Rsp', 'NULL'>),
                    'Resp'
  ),
  SesssionMajorSecretRespPSK( ~sid, ~tidR, ~oidI, ~oidR, handshake_secret
  ),
  Eq( init_finished_key, in_finished_key ),
  Eq( <VCATrancript, 
       (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
        <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'PSK_Finish', version, 'NULL'>+
        <'PSK_Finish_Rsp', 'NULL'>)
      >,
      K2_Transcript_HMAC
  ),
  RespAcceptPSKFinish( ~sid, ~tidR, ~oidI, ~oidR, handshake_secret )
  ]->
   [
   !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                     'resp_app_data'),
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                      <'PSK_Exchange_Resp', ker>+
                      <'PSK_Finish', 'PSK_Finish', version, 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                     'init_app_data'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                           <'PSK_Exchange_Resp', ker>+
                           <'PSK_Finish', 'PSK_Finish', version, 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                          'resp_app_data'),
                     version, 'key'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                           <'PSK_Exchange_Resp', ker>+
                           <'PSK_Finish', 'PSK_Finish', version, 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                          'init_app_data'),
                     version, 'key'),
                'Resp'
   ),
   Out( senc(<'Finish_Resp', version>,
             hkdf('pre_psk',
                  hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                  (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                   <'PSK_Exchange_Resp', ker>+
                   <'PSK_Finish', 'PSK_Finish', version, 
                    hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                   <'PSK_Finish_Rsp', 'Finish_Resp', version>),
                  'resp_app_data'))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_FinishMutualAuth_ProcessAndVerifyPSK[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR, version,
                    VCATranscript, (messageTranscript+<'PSK_Finish_Rsp', 'NULL'>),
                    someprivkey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'FINISH_PSK'
   ),
   !PSK( ~oidI, ~oidR, ~key ), Fr( ~kuid ),
   In( senc(<'PSK_Finish_Rsp', version>,
            hkdf('pre_psk',
                 hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                 (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>),
                 'resp_app_data'))
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  InitFinishMutualAuth( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'PSK_Finish_Rsp', 'NULL'>) ),
  SesssionMajorSecretInitPSK( ~sid, ~tid, ~oidI, ~oidR, handshake_secret ),
  CommitMutAuthPSK( ~sid, ~tid, handshake_secret,
                    (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>), 'Init'
  ),
  CommitMutAuthAll( ~sid, ~tid, handshake_secret,
                    (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>), 'Init'
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digestR )
  ]->
   [
   !AppDataKey( ~kuid, ~tid, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>),
                     'init_app_data'),
                hkdf('pre_psk',
                     hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>),
                     'resp_app_data'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>),
                          'init_app_data'),
                     version, 'key'),
                hkdf('pre_psk',
                     hkdf('pre_psk',
                          hmac(hkdf('pre_psk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+<'PSK_Finish_Rsp', 'PSK_Finish_Rsp', version>),
                          'resp_app_data'),
                     version, 'key'),
                'Init'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_KE_RequestPK[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI, (messageTranscript+<'Get_Key_Exchange', gke>), 'NULL',
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   Fr( ~nonce ), Fr( ~newPrivKey ), Fr( ~initSessionId )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  StartKeyExchangePK( ~sid, ~tid, ~oidI, ~oidR, ~initSessionId ),
  KETranscriptI( (messageTranscript+<'Get_Key_Exchange', gke>) ),
  IStoredCert( ~tid, ~oidI, ~oidR, pkR, digestR )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, ~initSessionId, 
                      ~nonce, 'g'^~newPrivKey>
                    ),
                    ~newPrivKey, ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                    'WAIT_KEY_RESP'
   ),
   Out( <'Get_Key_Exchange', version, ~initSessionId, ~nonce, 
         'g'^~newPrivKey>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_KE_ResponsePK[color=#ffc100]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                    'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
   ),
   !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ), Fr( ~respNonce ),
   Fr( ~respSessionId ), Fr( ~respPrivKey ),
   In( <'Get_Key_Exchange', version, initSessionId, nonce, publicKey> )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SendKEResponsePK( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
  RunningBeforeFinishPK( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkR) ),
  SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
  DHOutputResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR, publicKey^~respPrivKey ),
  KETranscriptR( (messageTranscript+<'Get_Key_Exchange', gke>+
                  <'Key_Exchange_Resp', ker>)
  ),
  RespKeyExchangeCertPK( ~sid, ~tidR, ~oidI, ~oidR,
                         hmac(publicKey^~respPrivKey, 'salt_o')
  )
  ]->
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                    version, VCATrancript,
                    (messageTranscript+
                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                      publicKey>+
                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                      'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                      sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                              h(pk(~ltkR)), 
                              (messageTranscript+
                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                publicKey>+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                              )
                             >),
                           ~ltkR), 
                      hmac(h(<VCATrancript, h(pk(~ltkR)), 
                              (messageTranscript+
                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                publicKey>+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                        h(pk(~ltkR)), 
                                        (messageTranscript+
                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                          nonce, publicKey>+
                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                          'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                        )
                                       >),
                                     ~ltkR), 
                                'NULL'>
                              )
                             >),
                           hkdf('pre_pk',
                                hkdf('pre_pk', hmac(publicKey^~respPrivKey, 'salt_o'),
                                     h(<VCATrancript, h(pk(~ltkR)), 
                                        (messageTranscript+
                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                          nonce, publicKey>+
                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                          'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                          sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                                  h(pk(~ltkR)), 
                                                  (messageTranscript+
                                                   <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                    initSessionId, nonce, publicKey>+
                                                   <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                    ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                    'g'^~respPrivKey, 'NULL', 'NULL'>
                                                  )
                                                 >),
                                               ~ltkR), 
                                          'NULL'>
                                        )
                                       >),
                                     'resp_hs_data'),
                                version, 'finished'))
                     >
                    ),
                    'NULL', hmac(publicKey^~respPrivKey, 'salt_o'),
                    hkdf('pre_pk',
                         hkdf('pre_pk', hmac(publicKey^~respPrivKey, 'salt_o'),
                              h(<VCATrancript, h(pk(~ltkR)), 
                                 (messageTranscript+
                                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                   publicKey>+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                           h(pk(~ltkR)), 
                                           (messageTranscript+
                                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                             nonce, publicKey>+
                                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                             ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                             'NULL', 'NULL'>
                                           )
                                          >),
                                        ~ltkR), 
                                   'NULL'>
                                 )
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    hkdf('pre_pk',
                         hkdf('pre_pk', hmac(publicKey^~respPrivKey, 'salt_o'),
                              h(<VCATrancript, h(pk(~ltkR)), 
                                 (messageTranscript+
                                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                   publicKey>+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                           h(pk(~ltkR)), 
                                           (messageTranscript+
                                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                             nonce, publicKey>+
                                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                             ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                             'NULL', 'NULL'>
                                           )
                                          >),
                                        ~ltkR), 
                                   'NULL'>
                                 )
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    sid(initSessionId, ~respSessionId), 'AFTER_KE'
   ),
   Out( <'Key_Exchange_Resp', version, ~respSessionId, 'No_Mutual_auth', 
         ~respNonce, 'g'^~respPrivKey, 
         sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                 h(pk(~ltkR)), 
                 (messageTranscript+
                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                   publicKey>+
                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                 )
                >),
              ~ltkR), 
         hmac(h(<VCATrancript, h(pk(~ltkR)), 
                 (messageTranscript+
                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                   publicKey>+
                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                   sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                           h(pk(~ltkR)), 
                           (messageTranscript+
                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                             publicKey>+
                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                             'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                           )
                          >),
                        ~ltkR), 
                   'NULL'>
                 )
                >),
              hkdf('pre_pk',
                   hkdf('pre_pk', hmac(publicKey^~respPrivKey, 'salt_o'),
                        h(<VCATrancript, h(pk(~ltkR)), 
                           (messageTranscript+
                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                             publicKey>+
                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                             'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                             sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                     h(pk(~ltkR)), 
                                     (messageTranscript+
                                      <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                       publicKey>+
                                      <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                       'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                     )
                                    >),
                                  ~ltkR), 
                             'NULL'>
                           )
                          >),
                        'resp_hs_data'),
                   version, 'finished'))
        >
   )
   ]

  /*
  rule (modulo AC) R_KE_ResponsePK[color=#ffc100]:
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                      version, VCATrancript,
                      (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                      'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
     ),
     !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ), Fr( ~respNonce ),
     Fr( ~respSessionId ), Fr( ~respPrivKey ),
     In( <'Get_Key_Exchange', version, initSessionId, nonce, publicKey> )
     ]
    --[
    Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
    SendKEResponsePK( ~sid, ~tidR, ~oidI, ~oidR, ~respSessionId ),
    RunningBeforeFinishPK( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkR) ),
    SessionId( ~tidR, ~sid, sid(initSessionId, ~respSessionId) ),
    DHOutputResp( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR, z ),
    KETranscriptR( (messageTranscript+<'Get_Key_Exchange', gke>+
                    <'Key_Exchange_Resp', ker>)
    ),
    RespKeyExchangeCertPK( ~sid, ~tidR, ~oidI, ~oidR, hmac(z, 'salt_o') )
    ]->
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                      version, VCATrancript,
                      (messageTranscript+
                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                        publicKey>+
                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                        'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                        sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                h(pk(~ltkR)), 
                                (messageTranscript+
                                 <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                  publicKey>+
                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                  'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                )
                               >),
                             ~ltkR), 
                        hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                (messageTranscript+
                                 <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                  publicKey>+
                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                  'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                  sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                          h(pk(~ltkR)), 
                                          (messageTranscript+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                            nonce, publicKey>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                            ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                            'NULL', 'NULL'>
                                          )
                                         >),
                                       ~ltkR), 
                                  'NULL'>
                                )
                               >),
                             hkdf('pre_pk',
                                  hkdf('pre_pk', hmac(z, 'salt_o'),
                                       h(<VCATrancript, h(pk(~ltkR)), 
                                          (messageTranscript+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                            nonce, publicKey>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                            ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                            sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                                    h(pk(~ltkR)), 
                                                    (messageTranscript+
                                                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                      initSessionId, nonce, publicKey>+
                                                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                      ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                      'g'^~respPrivKey, 'NULL', 'NULL'>
                                                    )
                                                   >),
                                                 ~ltkR), 
                                            'NULL'>
                                          )
                                         >),
                                       'resp_hs_data'),
                                  version, 'finished'))
                       >
                      ),
                      'NULL', hmac(z, 'salt_o'),
                      hkdf('pre_pk',
                           hkdf('pre_pk', hmac(z, 'salt_o'),
                                h(<VCATrancript, h(pk(~ltkR)), 
                                   (messageTranscript+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                             h(pk(~ltkR)), 
                                             (messageTranscript+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>
                                             )
                                            >),
                                          ~ltkR), 
                                     'NULL'>
                                   )
                                  >),
                                'resp_hs_data'),
                           version, 'finished'),
                      hkdf('pre_pk',
                           hkdf('pre_pk', hmac(z, 'salt_o'),
                                h(<VCATrancript, h(pk(~ltkR)), 
                                   (messageTranscript+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                             h(pk(~ltkR)), 
                                             (messageTranscript+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>
                                             )
                                            >),
                                          ~ltkR), 
                                     'NULL'>
                                   )
                                  >),
                                'init_hs_data'),
                           version, 'finished'),
                      sid(initSessionId, ~respSessionId), 'AFTER_KE'
     ),
     Out( <'Key_Exchange_Resp', version, ~respSessionId, 'No_Mutual_auth', 
           ~respNonce, 'g'^~respPrivKey, 
           sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                   h(pk(~ltkR)), 
                   (messageTranscript+
                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                     publicKey>+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                   )
                  >),
                ~ltkR), 
           hmac(h(<VCATrancript, h(pk(~ltkR)), 
                   (messageTranscript+
                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                     publicKey>+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                     sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                             h(pk(~ltkR)), 
                             (messageTranscript+
                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                               publicKey>+
                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                               'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                             )
                            >),
                          ~ltkR), 
                     'NULL'>
                   )
                  >),
                hkdf('pre_pk',
                     hkdf('pre_pk', hmac(z, 'salt_o'),
                          h(<VCATrancript, h(pk(~ltkR)), 
                             (messageTranscript+
                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                               publicKey>+
                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                               'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                               sign(h(<version, 'Key_Exchange_Resp_Signing', VCATrancript, 
                                       h(pk(~ltkR)), 
                                       (messageTranscript+
                                        <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                         nonce, publicKey>+
                                        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                         'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>
                                       )
                                      >),
                                    ~ltkR), 
                               'NULL'>
                             )
                            >),
                          'resp_hs_data'),
                     version, 'finished'))
          >
     )
     ]
    variants (modulo AC)
    1. ~respPrivKey
             = ~respPrivKey.40
       publicKey
             = publicKey.50
       z     = publicKey.50^~respPrivKey.40
    
    2. ~respPrivKey
             = ~respPrivKey.52
       publicKey
             = z.74^inv(~respPrivKey.52)
       z     = z.74
    
    3. ~respPrivKey
             = ~respPrivKey.472
       publicKey
             = x.936^x.937
       z     = x.936^(~respPrivKey.472*x.937)
    
    4. ~respPrivKey
             = ~respPrivKey.482
       publicKey
             = x.956^inv((~respPrivKey.482*x.957))
       z     = x.956^inv(x.957)
    
    5. ~respPrivKey
             = ~respPrivKey.482
       publicKey
             = x.956^(x.957*inv(~respPrivKey.482))
       z     = x.956^x.957
    
    6. ~respPrivKey
             = ~respPrivKey.483
       publicKey
             = x.957^(x.958*inv((~respPrivKey.483*x.959)))
       z     = x.957^(x.958*inv(x.959))
    
    7. publicKey
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) I_KE_ProcessAndVerifyPK[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI, (messageTranscript+<'Key_Exchange_Resp', rsp>), ~privKey,
                    ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'WAIT_KEY_RESP'
   ),
   In( <'Key_Exchange_Resp', version, respSessionId, 'No_Mutual_auth', 
        respNonce, respPublicKey, sign(h(K1_Transcript_Sign), ~ltkR), 
        hmac(h(K1_Transcript_HMAC), in_finished_key)>
   )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
  ReceiveKeyExchangePK( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Key_Exchange_Resp', rsp>) ),
  DHOutputInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, respPublicKey^~privKey
  ),
  CommitBeforeFinishPK( ~sid, ~tid, ~oidI, ~oidR, somepkR ),
  Eq( verify(sign(h(K1_Transcript_Sign), ~ltkR), h(K1_Transcript_Sign),
             somepkR),
      true
  ),
  Eq( K1_Transcript_Sign,
      <version, 'Key_Exchange_Resp_Signing', VCATrancriptI, h(somepkR), 
       (messageTranscript+
        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
         'No_Mutual_auth', respNonce, respPublicKey, 'NULL', 'NULL'>
       )
      >
  ),
  Eq( in_finished_key,
      hkdf('pre_pk',
           hkdf('pre_pk', hmac(respPublicKey^~privKey, 'salt_o'),
                h(<VCATrancriptI, h(somepkR), 
                   (messageTranscript+
                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                     'No_Mutual_auth', respNonce, respPublicKey, 
                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                   )
                  >),
                'resp_hs_data'),
           version, 'finished')
  ),
  Eq( K1_Transcript_HMAC,
      <VCATrancriptI, h(somepkR), 
       (messageTranscript+
        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
         'No_Mutual_auth', respNonce, respPublicKey, 
         sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
       )
      >
  ),
  InitAcceptKeyExchangeCertPK( ~sid, ~tid, ~oidI, ~oidR,
                               hmac(respPublicKey^~privKey, 'salt_o')
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                    VCATrancriptI,
                    (messageTranscript+
                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                      'No_Mutual_auth', respNonce, respPublicKey, 
                      sign(h(K1_Transcript_Sign), ~ltkR), 
                      hmac(h(K1_Transcript_HMAC), in_finished_key)>
                    ),
                    ~privKey, ~initSessionId,
                    hkdf('pre_pk', hmac(respPublicKey^~privKey, 'salt_o'),
                         h(<VCATrancriptI, h(somepkR), 
                            (messageTranscript+
                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                              'No_Mutual_auth', respNonce, respPublicKey, 
                              sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                            )
                           >),
                         'init_hs_data'),
                    hmac(respPublicKey^~privKey, 'salt_o'),
                    hkdf('pre_pk',
                         hkdf('pre_pk', hmac(respPublicKey^~privKey, 'salt_o'),
                              h(<VCATrancriptI, h(somepkR), 
                                 (messageTranscript+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                   'No_Mutual_auth', respNonce, respPublicKey, 
                                   sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                 )
                                >),
                              'init_hs_data'),
                         version, 'finished'),
                    hkdf('pre_pk',
                         hkdf('pre_pk', hmac(respPublicKey^~privKey, 'salt_o'),
                              h(<VCATrancriptI, h(somepkR), 
                                 (messageTranscript+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                   'No_Mutual_auth', respNonce, respPublicKey, 
                                   sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                 )
                                >),
                              'resp_hs_data'),
                         version, 'finished'),
                    sid(~initSessionId, respSessionId), 'AFTER_KE'
   )
   ]

  /*
  rule (modulo AC) I_KE_ProcessAndVerifyPK[color=#43aa8b]:
     [
     KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                      VCATrancriptI, (messageTranscript+<'Key_Exchange_Resp', rsp>), ~privKey,
                      ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'WAIT_KEY_RESP'
     ),
     In( <'Key_Exchange_Resp', version, respSessionId, 'No_Mutual_auth', 
          respNonce, respPublicKey, sign(h(K1_Transcript_Sign), ~ltkR), 
          hmac(h(K1_Transcript_HMAC), in_finished_key)>
     )
     ]
    --[
    Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
    SessionId( ~tid, ~sid, sid(~initSessionId, respSessionId) ),
    ReceiveKeyExchangePK( ~sid, ~tid, ~oidI, ~oidR ),
    KETranscriptI( (messageTranscript+<'Key_Exchange_Resp', rsp>) ),
    DHOutputInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, z ),
    CommitBeforeFinishPK( ~sid, ~tid, ~oidI, ~oidR, somepkR ),
    Eq( z.1, true ),
    Eq( K1_Transcript_Sign,
        <version, 'Key_Exchange_Resp_Signing', VCATrancriptI, h(somepkR), 
         (messageTranscript+
          <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
           'No_Mutual_auth', respNonce, respPublicKey, 'NULL', 'NULL'>
         )
        >
    ),
    Eq( in_finished_key,
        hkdf('pre_pk',
             hkdf('pre_pk', hmac(z, 'salt_o'),
                  h(<VCATrancriptI, h(somepkR), 
                     (messageTranscript+
                      <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                       'No_Mutual_auth', respNonce, respPublicKey, 
                       sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                     )
                    >),
                  'resp_hs_data'),
             version, 'finished')
    ),
    Eq( K1_Transcript_HMAC,
        <VCATrancriptI, h(somepkR), 
         (messageTranscript+
          <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
           'No_Mutual_auth', respNonce, respPublicKey, 
           sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
         )
        >
    ),
    InitAcceptKeyExchangeCertPK( ~sid, ~tid, ~oidI, ~oidR, hmac(z, 'salt_o')
    ),
    IStoredCert( ~tid, ~oidI, ~oidR, somepkR, digest )
    ]->
     [
     KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest, version,
                      VCATrancriptI,
                      (messageTranscript+
                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                        'No_Mutual_auth', respNonce, respPublicKey, 
                        sign(h(K1_Transcript_Sign), ~ltkR), 
                        hmac(h(K1_Transcript_HMAC), in_finished_key)>
                      ),
                      ~privKey, ~initSessionId,
                      hkdf('pre_pk', hmac(z, 'salt_o'),
                           h(<VCATrancriptI, h(somepkR), 
                              (messageTranscript+
                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                'No_Mutual_auth', respNonce, respPublicKey, 
                                sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                              )
                             >),
                           'init_hs_data'),
                      hmac(z, 'salt_o'),
                      hkdf('pre_pk',
                           hkdf('pre_pk', hmac(z, 'salt_o'),
                                h(<VCATrancriptI, h(somepkR), 
                                   (messageTranscript+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                     'No_Mutual_auth', respNonce, respPublicKey, 
                                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                   )
                                  >),
                                'init_hs_data'),
                           version, 'finished'),
                      hkdf('pre_pk',
                           hkdf('pre_pk', hmac(z, 'salt_o'),
                                h(<VCATrancriptI, h(somepkR), 
                                   (messageTranscript+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                     'No_Mutual_auth', respNonce, respPublicKey, 
                                     sign(h(K1_Transcript_Sign), ~ltkR), 'NULL'>
                                   )
                                  >),
                                'resp_hs_data'),
                           version, 'finished'),
                      sid(~initSessionId, respSessionId), 'AFTER_KE'
     )
     ]
    variants (modulo AC)
     1. ~ltkR = ~ltkR.33
        respPublicKey
              = DH_neutral
        somepkR
              = pk(~ltkR.33)
        z     = DH_neutral
        z.1   = true
    
     2. ~ltkR = ~ltkR.46
        ~privKey
              = ~privKey.49
        respPublicKey
              = respPublicKey.59
        somepkR
              = pk(~ltkR.46)
        z     = respPublicKey.59^~privKey.49
        z.1   = true
    
     3. ~ltkR = ~ltkR.49
        ~privKey
              = ~privKey.52
        K1_Transcript_Sign
              = K1_Transcript_Sign.56
        respPublicKey
              = respPublicKey.62
        somepkR
              = somepkR.65
        z     = respPublicKey.62^~privKey.52
        z.1   = verify(sign(h(K1_Transcript_Sign.56), ~ltkR.49),
                       h(K1_Transcript_Sign.56), somepkR.65)
    
     4. ~ltkR = ~ltkR.49
        K1_Transcript_Sign
              = K1_Transcript_Sign.56
        respPublicKey
              = DH_neutral
        somepkR
              = somepkR.65
        z     = DH_neutral
        z.1   = verify(sign(h(K1_Transcript_Sign.56), ~ltkR.49),
                       h(K1_Transcript_Sign.56), somepkR.65)
    
     5. ~ltkR = ~ltkR.56
        ~privKey
              = ~privKey.59
        K1_Transcript_Sign
              = K1_Transcript_Sign.63
        respPublicKey
              = z.79^inv(~privKey.59)
        somepkR
              = somepkR.72
        z     = z.79
        z.1   = verify(sign(h(K1_Transcript_Sign.63), ~ltkR.56),
                       h(K1_Transcript_Sign.63), somepkR.72)
    
     6. ~ltkR = ~ltkR.56
        ~privKey
              = ~privKey.59
        respPublicKey
              = z.79^inv(~privKey.59)
        somepkR
              = pk(~ltkR.56)
        z     = z.79
        z.1   = true
    
     7. ~ltkR = ~ltkR.344
        ~privKey
              = ~privKey.347
        K1_Transcript_Sign
              = K1_Transcript_Sign.351
        respPublicKey
              = x.684^x.685
        somepkR
              = somepkR.360
        z     = x.684^(~privKey.347*x.685)
        z.1   = verify(sign(h(K1_Transcript_Sign.351), ~ltkR.344),
                       h(K1_Transcript_Sign.351), somepkR.360)
    
     8. ~ltkR = ~ltkR.354
        ~privKey
              = ~privKey.357
        K1_Transcript_Sign
              = K1_Transcript_Sign.361
        respPublicKey
              = x.704^inv((~privKey.357*x.705))
        somepkR
              = somepkR.370
        z     = x.704^inv(x.705)
        z.1   = verify(sign(h(K1_Transcript_Sign.361), ~ltkR.354),
                       h(K1_Transcript_Sign.361), somepkR.370)
    
     9. ~ltkR = ~ltkR.354
        ~privKey
              = ~privKey.357
        K1_Transcript_Sign
              = K1_Transcript_Sign.361
        respPublicKey
              = x.704^(x.705*inv(~privKey.357))
        somepkR
              = somepkR.370
        z     = x.704^x.705
        z.1   = verify(sign(h(K1_Transcript_Sign.361), ~ltkR.354),
                       h(K1_Transcript_Sign.361), somepkR.370)
    
    10. ~ltkR = ~ltkR.355
        ~privKey
              = ~privKey.358
        K1_Transcript_Sign
              = K1_Transcript_Sign.362
        respPublicKey
              = x.705^(x.706*inv((~privKey.358*x.707)))
        somepkR
              = somepkR.371
        z     = x.705^(x.706*inv(x.707))
        z.1   = verify(sign(h(K1_Transcript_Sign.362), ~ltkR.355),
                       h(K1_Transcript_Sign.362), somepkR.371)
    
    11. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^x.711
        somepkR
              = pk(~ltkR.357)
        z     = x.710^(~privKey.360*x.711)
        z.1   = true
    
    12. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^inv((~privKey.360*x.711))
        somepkR
              = pk(~ltkR.357)
        z     = x.710^inv(x.711)
        z.1   = true
    
    13. ~ltkR = ~ltkR.357
        ~privKey
              = ~privKey.360
        respPublicKey
              = x.710^(x.711*inv(~privKey.360))
        somepkR
              = pk(~ltkR.357)
        z     = x.710^x.711
        z.1   = true
    
    14. ~ltkR = ~ltkR.358
        ~privKey
              = ~privKey.361
        respPublicKey
              = x.711^(x.712*inv((~privKey.361*x.713)))
        somepkR
              = pk(~ltkR.358)
        z     = x.711^(x.712*inv(x.713))
        z.1   = true
  */

rule (modulo E) I_FinishMutualAuth_RequestPK[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pk(~ltkR), digest, version,
                    VCATranscript,
                    (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
   ),
   !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ),
   In( <'Encap_Ack', version> )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  ReceivedACKPK( ~sid, ~tid, ~oidI, ~oidR ),
  StartFinishKEMutualAuthPK( ~sid, ~tid, ~oidI, ~oidR ),
  KETranscriptI( (messageTranscript+<'Finish', 'NULL'>+
                  <'Finish_Rsp', 'NULL'>)
  ),
  RunningMutAuthPK( ~sid, ~tid, pk(~ltkI), pk(~ltkR), handshake_secret,
                    (messageTranscript+
                     <'Finish', 'Finish', version, 
                      sign(h(<VCATranscript, h(pk(~ltkR)), 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(pk(~ltkI))>),
                           ~ltkI), 
                      hmac(h(<VCATranscript, h(pk(~ltkR)), 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(pk(~ltkI)), 
                              sign(h(<VCATranscript, h(pk(~ltkR)), 
                                      (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                       <'Finish_Rsp', 'NULL'>), 
                                      h(pk(~ltkI))>),
                                   ~ltkI)
                             >),
                           init_finished_key)
                     >+
                     <'Finish_Rsp', 'NULL'>),
                    'Init'
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, pk(~ltkR), digest )
  ]->
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pk(~ltkR), digest, version,
                    VCATranscript,
                    (messageTranscript+
                     <'Finish', 'Finish', version, 
                      sign(h(<VCATranscript, h(pk(~ltkR)), 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(pk(~ltkI))>),
                           ~ltkI), 
                      hmac(h(<VCATranscript, h(pk(~ltkR)), 
                              (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                               <'Finish_Rsp', 'NULL'>), 
                              h(pk(~ltkI)), 
                              sign(h(<VCATranscript, h(pk(~ltkR)), 
                                      (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                                       <'Finish_Rsp', 'NULL'>), 
                                      h(pk(~ltkI))>),
                                   ~ltkI)
                             >),
                           init_finished_key)
                     >+
                     <'Finish_Rsp', 'NULL'>),
                    ~privKey, ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid,
                    'PROCESS_FINISH_REQUEST_AUTH'
   ),
   Out( <'Finish', version, 
         sign(h(<VCATranscript, h(pk(~ltkR)), 
                 (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                  <'Finish_Rsp', 'NULL'>), 
                 h(pk(~ltkI))>),
              ~ltkI), 
         hmac(h(<VCATranscript, h(pk(~ltkR)), 
                 (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                  <'Finish_Rsp', 'NULL'>), 
                 h(pk(~ltkI)), 
                 sign(h(<VCATranscript, h(pk(~ltkR)), 
                         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
                          <'Finish_Rsp', 'NULL'>), 
                         h(pk(~ltkI))>),
                      ~ltkI)
                >),
              init_finished_key)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_FinishMutualAuth_ResponsePK[color=#ffc100]:
   [
   KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkI), digest_init,
                    version, VCATrancript,
                    (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>), 'NULL',
                    handshake_secret, resp_finished_key, init_finished_key, bindSid,
                    'READY_MUTAUTH'
   ),
   !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ),
   In( <'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
        hmac(h(K2_Transcript_HMAC), in_finished_key)>
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
  SessionId( ~tidR, ~sid, bindSid ), StartAppData( ~sid, bindSid ),
  RespFinishMutualAuth1PK( ~sid, ~tidR, ~oidI, ~oidR ),
  KETranscriptR( (messageTranscript+<'Finish', 'NULL'>+
                  <'Finish_Rsp', 'NULL'>)
  ),
  SesssionMajorSecretRespPK( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR,
                             handshake_secret
  ),
  RunningMutAuthPK( ~sid, ~tidR, pk(~ltkR), pk(~ltkI), handshake_secret,
                    (messageTranscript+
                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                     <'Finish_Rsp', 'Finish_Rsp', version, 
                      hmac(h(<VCATrancript, h(pk(~ltkR)), 
                              (messageTranscript+
                               <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                               <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                              h(pk(~ltkI))>),
                           resp_finished_key)
                     >
                    ),
                    'Resp'
  ),
  CommitMutAuthPK( ~sid, ~tidR, pk(~ltkR), pk(~ltkI), handshake_secret,
                   (messageTranscript+
                    <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                     hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                    <'Finish_Rsp', 'NULL'>),
                   'Resp'
  ),
  KeyUpdatePK( ~tidR, ~sid, ~kuid ),
  KeysPK( ~tidR, ~sid, ~kuid, bindSid,
          hkdf('pre_pk',
               hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
               (messageTranscript+
                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                <'Finish_Rsp', 'Finish_Rsp', version, 
                 hmac(h(<VCATrancript, h(pk(~ltkR)), 
                         (messageTranscript+
                          <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                           hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                          <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                         h(pk(~ltkI))>),
                      resp_finished_key)
                >
               ),
               'resp_app_data'),
          hkdf('pre_pk',
               hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
               (messageTranscript+
                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                <'Finish_Rsp', 'Finish_Rsp', version, 
                 hmac(h(<VCATrancript, h(pk(~ltkR)), 
                         (messageTranscript+
                          <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                           hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                          <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                         h(pk(~ltkI))>),
                      resp_finished_key)
                >
               ),
               'init_app_data'),
          'Resp'
  ),
  FirstMasterSecretPK( ~tidR, ~sid, bindSid, ~oidI, ~oidR,
                       hkdf('pre_pk',
                            hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                      (messageTranscript+
                                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                       <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                      h(pk(~ltkI))>),
                                   resp_finished_key)
                             >
                            ),
                            'resp_app_data')
  ),
  Eq( verify(sign(h(K2_Transcript_sign), ~someltkI), h(K2_Transcript_sign),
             pk(~ltkI)),
      true
  ),
  Eq( init_finished_key, in_finished_key ),
  Eq( <VCATrancript, h(pk(~ltkR)), 
       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
        <'Finish_Rsp', 'NULL'>), 
       h(pk(~ltkI)), sign(h(K2_Transcript_sign), ~someltkI)>,
      K2_Transcript_HMAC
  ),
  Eq( <VCATrancript, h(pk(~ltkR)), 
       (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
        <'Finish_Rsp', 'NULL'>), 
       h(pk(~ltkI))>,
      K2_Transcript_sign
  )
  ]->
   [
   !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('pre_pk',
                     hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(pk(~ltkR)), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                               h(pk(~ltkI))>),
                            resp_finished_key)
                      >
                     ),
                     'resp_app_data'),
                hkdf('pre_pk',
                     hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(<VCATrancript, h(pk(~ltkR)), 
                               (messageTranscript+
                                <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                 hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                               h(pk(~ltkI))>),
                            resp_finished_key)
                      >
                     ),
                     'init_app_data'),
                hkdf('pre_pk',
                     hkdf('pre_pk',
                          hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                    h(pk(~ltkI))>),
                                 resp_finished_key)
                           >
                          ),
                          'resp_app_data'),
                     version, 'key'),
                hkdf('pre_pk',
                     hkdf('pre_pk',
                          hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                            hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                    (messageTranscript+
                                     <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                      hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                     <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                    h(pk(~ltkI))>),
                                 resp_finished_key)
                           >
                          ),
                          'init_app_data'),
                     version, 'key'),
                'Resp'
   ),
   Out( <'Finish_Rsp', version, 
         hmac(h(<VCATrancript, h(pk(~ltkR)), 
                 (messageTranscript+
                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                 h(pk(~ltkI))>),
              resp_finished_key)
        >
   )
   ]

  /*
  rule (modulo AC) R_FinishMutualAuth_ResponsePK[color=#ffc100]:
     [
     KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, pk(~ltkI), digest_init,
                      version, VCATrancript,
                      (messageTranscript+<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>), 'NULL',
                      handshake_secret, resp_finished_key, init_finished_key, bindSid,
                      'READY_MUTAUTH'
     ),
     !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ),
     In( <'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
          hmac(h(K2_Transcript_HMAC), in_finished_key)>
     ),
     Fr( ~kuid )
     ]
    --[
    Version( ~tidR, version ), CurrentThreadR( ~tidR, ~oidI, ~oidR ),
    SessionId( ~tidR, ~sid, bindSid ), StartAppData( ~sid, bindSid ),
    RespFinishMutualAuth1PK( ~sid, ~tidR, ~oidI, ~oidR ),
    KETranscriptR( (messageTranscript+<'Finish', 'NULL'>+
                    <'Finish_Rsp', 'NULL'>)
    ),
    SesssionMajorSecretRespPK( ~sid, ~tidR, ~oidI, ~oidR, ~ltkR,
                               handshake_secret
    ),
    RunningMutAuthPK( ~sid, ~tidR, pk(~ltkR), pk(~ltkI), handshake_secret,
                      (messageTranscript+
                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                       <'Finish_Rsp', 'Finish_Rsp', version, 
                        hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                (messageTranscript+
                                 <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                  hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                 <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                h(pk(~ltkI))>),
                             resp_finished_key)
                       >
                      ),
                      'Resp'
    ),
    CommitMutAuthPK( ~sid, ~tidR, pk(~ltkR), pk(~ltkI), handshake_secret,
                     (messageTranscript+
                      <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                       hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                      <'Finish_Rsp', 'NULL'>),
                     'Resp'
    ),
    KeyUpdatePK( ~tidR, ~sid, ~kuid ),
    KeysPK( ~tidR, ~sid, ~kuid, bindSid,
            hkdf('pre_pk',
                 hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                 (messageTranscript+
                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', 'Finish_Rsp', version, 
                   hmac(h(<VCATrancript, h(pk(~ltkR)), 
                           (messageTranscript+
                            <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                             hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                            <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                           h(pk(~ltkI))>),
                        resp_finished_key)
                  >
                 ),
                 'resp_app_data'),
            hkdf('pre_pk',
                 hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                 (messageTranscript+
                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                  <'Finish_Rsp', 'Finish_Rsp', version, 
                   hmac(h(<VCATrancript, h(pk(~ltkR)), 
                           (messageTranscript+
                            <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                             hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                            <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                           h(pk(~ltkI))>),
                        resp_finished_key)
                  >
                 ),
                 'init_app_data'),
            'Resp'
    ),
    FirstMasterSecretPK( ~tidR, ~sid, bindSid, ~oidI, ~oidR,
                         hkdf('pre_pk',
                              hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                              (messageTranscript+
                               <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                               <'Finish_Rsp', 'Finish_Rsp', version, 
                                hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                        (messageTranscript+
                                         <'Finish', 'Finish', version, 
                                          sign(h(K2_Transcript_sign), ~someltkI), 
                                          hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                         <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                        h(pk(~ltkI))>),
                                     resp_finished_key)
                               >
                              ),
                              'resp_app_data')
    ),
    Eq( z, true ), Eq( init_finished_key, in_finished_key ),
    Eq( <VCATrancript, h(pk(~ltkR)), 
         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
          <'Finish_Rsp', 'NULL'>), 
         h(pk(~ltkI)), sign(h(K2_Transcript_sign), ~someltkI)>,
        K2_Transcript_HMAC
    ),
    Eq( <VCATrancript, h(pk(~ltkR)), 
         (messageTranscript+<'Finish', 'Finish', version, 'NULL'>+
          <'Finish_Rsp', 'NULL'>), 
         h(pk(~ltkI))>,
        K2_Transcript_sign
    )
    ]->
     [
     !AppDataKey( ~kuid, ~tidR, ~sid, ~oidI, ~oidR, bindSid, version,
                  hkdf('pre_pk',
                       hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                       (messageTranscript+
                        <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                         hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                        <'Finish_Rsp', 'Finish_Rsp', version, 
                         hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                 (messageTranscript+
                                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                 h(pk(~ltkI))>),
                              resp_finished_key)
                        >
                       ),
                       'resp_app_data'),
                  hkdf('pre_pk',
                       hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                       (messageTranscript+
                        <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                         hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                        <'Finish_Rsp', 'Finish_Rsp', version, 
                         hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                 (messageTranscript+
                                  <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                   hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                  <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                 h(pk(~ltkI))>),
                              resp_finished_key)
                        >
                       ),
                       'init_app_data'),
                  hkdf('pre_pk',
                       hkdf('pre_pk',
                            hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                      (messageTranscript+
                                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                       <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                      h(pk(~ltkI))>),
                                   resp_finished_key)
                             >
                            ),
                            'resp_app_data'),
                       version, 'key'),
                  hkdf('pre_pk',
                       hkdf('pre_pk',
                            hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                              hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(<VCATrancript, h(pk(~ltkR)), 
                                      (messageTranscript+
                                       <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                                        hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                                       <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                                      h(pk(~ltkI))>),
                                   resp_finished_key)
                             >
                            ),
                            'init_app_data'),
                       version, 'key'),
                  'Resp'
     ),
     Out( <'Finish_Rsp', version, 
           hmac(h(<VCATrancript, h(pk(~ltkR)), 
                   (messageTranscript+
                    <'Finish', 'Finish', version, sign(h(K2_Transcript_sign), ~someltkI), 
                     hmac(h(K2_Transcript_HMAC), in_finished_key)>+
                    <'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
                   h(pk(~ltkI))>),
                resp_finished_key)
          >
     )
     ]
    variants (modulo AC)
    1. ~ltkI = ~ltkI.33
       ~someltkI
             = ~ltkI.33
       z     = true
    
    2. ~ltkI = ~ltkI.41
       ~someltkI
             = ~someltkI.46
       K2_Transcript_sign
             = K2_Transcript_sign.49
       z     = verify(sign(h(K2_Transcript_sign.49), ~someltkI.46),
                      h(K2_Transcript_sign.49), pk(~ltkI.41))
  */

rule (modulo E) I_FinishMutualAuth_ProcessAndVerifyPK[color=#43aa8b]:
   [
   KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pk(~ltkR), digestR, version,
                    VCATranscript, (messageTranscript+<'Finish_Rsp', 'NULL'>), ~privKey,
                    ~initSessionId, init_handshake_secret, handshake_secret,
                    init_finished_key, resp_finished_key, bindSid,
                    'PROCESS_FINISH_REQUEST_AUTH'
   ),
   !SharedPK( ~oidI, ~oidR, pk(~ltkI), pk(~ltkR) ),
   In( <'Finish_Rsp', version, hmac(h(K1_Transcript_HMAC), in_finished_key)>
   ),
   Fr( ~kuid )
   ]
  --[
  Version( ~tid, version ), CurrentThreadI( ~tid, ~oidI, ~oidR ),
  SessionId( ~tid, ~sid, bindSid ),
  InitFinishMutualAuthPK( ~sid, ~tid, ~oidI, ~oidR ),
  SesssionMajorSecretInitPK( ~sid, ~tid, ~oidI, ~oidR, pk(~ltkR),
                             hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled')
  ),
  CommitMutAuthPK( ~sid, ~tid, pk(~ltkI), pk(~ltkR), handshake_secret,
                   (messageTranscript+
                    <'Finish_Rsp', 'Finish_Rsp', version, 
                     hmac(h(K1_Transcript_HMAC), in_finished_key)>
                   ),
                   'Init'
  ),
  KeyUpdatePK( ~tid, ~sid, ~kuid ),
  KeysPK( ~tid, ~sid, ~kuid, bindSid,
          hkdf('pre_pk',
               hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
               (messageTranscript+
                <'Finish_Rsp', 'Finish_Rsp', version, 
                 hmac(h(K1_Transcript_HMAC), in_finished_key)>
               ),
               'init_app_data'),
          hkdf('pre_pk',
               hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
               (messageTranscript+
                <'Finish_Rsp', 'Finish_Rsp', version, 
                 hmac(h(K1_Transcript_HMAC), in_finished_key)>
               ),
               'resp_app_data'),
          'Init'
  ),
  FirstMasterSecretPK( ~tid, ~sid, bindSid, ~oidI, ~oidR,
                       hkdf('pre_pk',
                            hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                            (messageTranscript+
                             <'Finish_Rsp', 'Finish_Rsp', version, 
                              hmac(h(K1_Transcript_HMAC), in_finished_key)>
                            ),
                            'init_app_data')
  ),
  Eq( in_finished_key, resp_finished_key ),
  Eq( K1_Transcript_HMAC,
      <VCATranscript, h(pk(~ltkR)), 
       (messageTranscript+<'Finish_Rsp', 'Finish_Rsp', version, 'NULL'>), 
       h(pk(~ltkI))>
  ),
  IStoredCert( ~tid, ~oidI, ~oidR, pk(~ltkR), digestR )
  ]->
   [
   !AppDataKey( ~kuid, ~tid, ~sid, ~oidI, ~oidR, bindSid, version,
                hkdf('pre_pk',
                     hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'init_app_data'),
                hkdf('pre_pk',
                     hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                     (messageTranscript+
                      <'Finish_Rsp', 'Finish_Rsp', version, 
                       hmac(h(K1_Transcript_HMAC), in_finished_key)>
                     ),
                     'resp_app_data'),
                hkdf('pre_pk',
                     hkdf('pre_pk',
                          hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'init_app_data'),
                     version, 'key'),
                hkdf('pre_pk',
                     hkdf('pre_pk',
                          hmac(hkdf('pre_pk', handshake_secret, version, 'derived'), '0_filled'),
                          (messageTranscript+
                           <'Finish_Rsp', 'Finish_Rsp', version, 
                            hmac(h(K1_Transcript_HMAC), in_finished_key)>
                          ),
                          'resp_app_data'),
                     version, 'key'),
                'Init'
   )
   ]

  /* has exactly the trivial AC variant */

lemma versiontypes [heuristic=S, sources]:
  all-traces
  "∀ tid version #i.
    (Version( tid, version ) @ #i) ⇒
    (∃ #j. (!KU( version ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid version #i.
  (Version( tid, version ) @ #i)
 ∧
  ∀ #j. (!KU( version ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( version ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( Version( tid, version ) @ #i )
      case I_Algorithms_ProcessResponse
      by contradiction /* from formulas */
    next
      case I_Algorithms_Request
      by contradiction /* from formulas */
    next
      case I_AuthWithOldCert_BeforeFinish
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest,
                              version, VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                              init_handshake_secret, handshake_secret, init_finished_key,
                              resp_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i )
        case I_KE_ProcessAndVerifyPK_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerifyPK_case_2
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      qed
    next
      case I_Capabilities_Request
      by contradiction /* from formulas */
    next
      case I_Certificate_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_Certificate_Request
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Certificate', getcert>), somepkR,
                        digest, 'NEED_TO_START_CERTIFICATE'
             ) ▶₀ #i )
        case I_Digest_ReceiveUnknownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveUnknownDigest_case_2
        by contradiction /* from formulas */
      qed
    next
      case I_Certificate_Request_new
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Certificate', getcert>), somepkR,
                        digest, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_4
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_5
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_6
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_7
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_8
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_Challenge_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_Challenge_Request
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Challenge', getchal>), somepkR,
                        digest, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_4
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_DeliverEncap_SendCertificate
      by contradiction /* from formulas */
    next
      case I_DeliverEncap_SendDigest
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR,
                              version, VCATranscript, messageTranscript, ~privKey, ~initSessionId,
                              init_handshake_secret, handshake_secret, init_finished_key,
                              resp_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i )
        case I_KE_ProcessAndVerifyPK_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerifyPK_case_2
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      qed
    next
      case I_Digest_ReceiveKnownDigest
      by contradiction /* from formulas */
    next
      case I_Digest_ReceiveUnknownDigest
      by contradiction /* from formulas */
    next
      case I_Digest_Request
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Digest', getdig>), somepkR,
                        digest, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_4
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_FinishMutualAuth_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_FinishMutualAuth_ProcessAndVerifyPK
      by contradiction /* from formulas */
    next
      case I_FinishMutualAuth_ProcessAndVerifyPSK
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digestR,
                              version, VCATranscript, (messageTranscript+<'PSK_Finish_Rsp', 'NULL'>),
                              someprivkey, ~initSessionId, init_handshake_secret, handshake_secret,
                              init_finished_key, resp_finished_key, bindSid, 'FINISH_PSK'
             ) ▶₀ #i )
        case I_PSK_Finish_case_1
        by contradiction /* from formulas */
      next
        case I_PSK_Finish_case_2
        by contradiction /* from formulas */
      next
        case I_PSK_Finish_case_3
        by contradiction /* from formulas */
      next
        case I_PSK_Finish_case_4
        by contradiction /* from formulas */
      next
        case I_PSK_Finish_case_5
        by contradiction /* from formulas */
      qed
    next
      case I_FinishMutualAuth_Request
      by contradiction /* from formulas */
    next
      case I_FinishMutualAuth_RequestPK
      by contradiction /* from formulas */
    next
      case I_Finish_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_Finish_Request
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest,
                              version, VCATranscript, (messageTranscript+<'Finish', f>), ~privKey,
                              ~initSessionId, init_handshake_secret, handshake_secret,
                              init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i )
        case I_KE_ProcessAndVerifyPK_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerifyPK_case_2
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      qed
    next
      case I_KE_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_KE_ProcessAndVerifyPK
      by contradiction /* from formulas */
    next
      case I_KE_Request
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                              VCATrancriptI, (messageTranscript+<'Get_Key_Exchange', gke>), 'NULL',
                              'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
             ) ▶₀ #i )
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_KE_RequestPK
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                              VCATrancriptI, (messageTranscript+<'Get_Key_Exchange', gke>), 'NULL',
                              'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
             ) ▶₀ #i )
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_MeasurementSharedPK_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_MeasurementSharedPK_Request
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Measurement', 'NULL'>), 'NULL',
                        digest, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_Measurement_ProcessAndVerify
      by contradiction /* from formulas */
    next
      case I_Measurement_Request
      solve( StateInit( ~tid, ~oid, ~oidR, version, ax, <V, C, A>,
                        VCATranscript, (optionsTranscript+<'Get_Measurement', 'NULL'>), somepkR,
                        digest, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_4
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_1
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_PSK_Finish
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest,
                              version, VCATrancriptI,
                              (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                               <'PSK_Exchange_Resp', ker>+<'PSK_Finish', f>),
                              someprivKey, ~initSessionId, init_handshake_secret, handshake_secret,
                              init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i )
        case I_KE_ProcessAndVerifyPK_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerifyPK_case_2
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_KE_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_PSK_ProcessAndVerify_withNonce
        by contradiction /* from formulas */
      qed
    next
      case I_PSK_ProcessAndVerify
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest,
                              version, VCATrancriptI,
                              (messageTranscript+<'PSK_Exchange_Resp', rsp>+<'PSK_Finish', 'NULL'>),
                              'NULL', ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                              'WAIT_KEY_RESP'
             ) ▶₀ #i )
        case I_PSK_Request
        by contradiction /* from formulas */
      qed
    next
      case I_PSK_ProcessAndVerify_withNonce
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, somepkR, digest,
                              version, VCATrancriptI,
                              (messageTranscript+<'PSK_Exchange_Resp', rsp>+<'PSK_Finish', 'NULL'>),
                              'NULL', ~initSessionId, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL',
                              'WAIT_KEY_RESP'
             ) ▶₀ #i )
        case I_PSK_Request
        by contradiction /* from formulas */
      qed
    next
      case I_PSK_Request
      solve( KeyExchangeInit( ~sid, ~tid, ~oidI, ~oidR, pkR, digestR, version,
                              VCATrancriptI, (messageTranscript+<'Get_PSK_Exchange', gke>), 'NULL',
                              'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
             ) ▶₀ #i )
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case I_Spawn_new_Session
      solve( StateInit( ~tidI, ~oidI, ~oidR, version, axI, <VI, CI, AI>,
                        VCATranscriptI, optionsTranscriptI, somePKR, digestR, 'IDLE'
             ) ▶₀ #i )
        case I_Algorithms_ProcessResponse
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Certificate_ProcessAndVerify_case_4
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Challenge_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Digest_ReceiveKnownDigest
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_MeasurementSharedPK_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_1
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_2
        by contradiction /* from formulas */
      next
        case I_Measurement_ProcessAndVerify_case_3
        by contradiction /* from formulas */
      next
        case I_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    next
      case R_Algorithms_Response
      by contradiction /* from formulas */
    next
      case R_AuthWithOldCert_BeforeFinish
      solve( KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                              version, VCATrancript, messageTranscript, init_handshake_secret,
                              handshake_secret, resp_finished_key, init_finished_key, bindSid,
                              'AFTER_KE'
             ) ▶₀ #i )
        case R_KE_Response
        by contradiction /* from formulas */
      next
        case R_KE_ResponsePK
        by contradiction /* from formulas */
      next
        case R_PSK_Response_withNonce
        by contradiction /* from formulas */
      qed
    next
      case R_Capabilities_Response
      by contradiction /* from formulas */
    next
      case R_Certificate_Response
      by contradiction /* from formulas */
    next
      case R_Challenge_Response
      by contradiction /* from formulas */
    next
      case R_Digest_Response
      by contradiction /* from formulas */
    next
      case R_EncapsResponseAck_RecvCertificate
      by contradiction /* from formulas */
    next
      case R_EncapsResponseAck_RecvDigestGetCertificate
      by contradiction /* from formulas */
    next
      case R_FinishMutualAuth_Response
      by contradiction /* from formulas */
    next
      case R_FinishMutualAuth_ResponsePK
      by contradiction /* from formulas */
    next
      case R_FinishPSK_Response
      solve( KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, digest_init,
                              version, VCATrancript,
                              (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                               <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>+
                               <'PSK_Finish_Rsp', 'NULL'>),
                              init_handshake_secret, handshake_secret, resp_finished_key,
                              in_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i )
        case R_KE_Response
        by contradiction /* from formulas */
      next
        case R_KE_ResponsePK
        by contradiction /* from formulas */
      next
        case R_PSK_Response_withNonce
        by contradiction /* from formulas */
      qed
    next
      case R_Finish_Response
      by contradiction /* from formulas */
    next
      case R_KE_Response
      by contradiction /* from formulas */
    next
      case R_KE_ResponsePK
      by contradiction /* from formulas */
    next
      case R_Measurement_Response
      by contradiction /* from formulas */
    next
      case R_PSK_Response_WithoutNonce
      by contradiction /* from formulas */
    next
      case R_PSK_Response_withNonce
      by contradiction /* from formulas */
    next
      case R_Spawn_new_Session
      solve( StateResp( ~tidR, ~oidI, ~oidR, version, axR, <VR, CR, AR>,
                        VCATranscriptR, optionsTranscriptR, pubKI, digestI, 'IDLE'
             ) ▶₀ #i )
        case R_Algorithms_Response
        by contradiction /* from formulas */
      next
        case R_Certificate_Response
        by contradiction /* from formulas */
      next
        case R_Challenge_Response
        by contradiction /* from formulas */
      next
        case R_Digest_Response
        by contradiction /* from formulas */
      next
        case R_EncapsResponseAck_RecvCertificate_case_1
        by contradiction /* from formulas */
      next
        case R_EncapsResponseAck_RecvCertificate_case_2
        by contradiction /* from formulas */
      next
        case R_EncapsResponseAck_RecvCertificate_case_3
        by contradiction /* from formulas */
      next
        case R_Measurement_Response_case_1
        by contradiction /* from formulas */
      next
        case R_Measurement_Response_case_2
        by contradiction /* from formulas */
      next
        case R_Measurement_Response_case_3
        by contradiction /* from formulas */
      next
        case R_Spawn_new_Session
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma Attack_Responder_Requester_Mode_Switch [heuristic=S,
                                              hide_lemma=RespOptionLoopBreaker, hide_lemma=cert_create_resp,
                                              hide_lemma=cert_create_init, hide_lemma=rootCert_before_Rcert,
                                              hide_lemma=rootCert_before_Icert, hide_lemma=resp_stored_cert,
                                              hide_lemma=init_stored_cert]:
  exists-trace
  "∃ sid1 sid2 tid1 tid2 oid oidR secrt #i #i1 #i2 #i3 #j1 #j2.
    ((((((((((((((((((((((InitReachVCA( tid1, oid, oidR ) @ #i) ∧
                         (InitKeyExchangeCert( sid1, tid1, oid, oidR ) @ #i1)) ∧
                        (RespKeyExchangeCert( sid2, tid2, oid, oidR, secrt ) @ #j1)) ∧
                       (InitAcceptKeyExchangeCert( sid1, tid1, oid, oidR, secrt ) @ #i2)) ∧
                      (InitRequestPSKFinish( sid1, tid1, oid, oidR, secrt ) @ #i3)) ∧
                     (RespAcceptPSKFinish( sid2, tid2, oid, oidR, secrt ) @ #j2)) ∧
                    (¬(∃ someoid ltk pk1 #t. Attacker( someoid, ltk, pk1 ) @ #t))) ∧
                   (¬(∃ #k. NotLoopOptions( ) @ #k))) ∧
                  (¬(∃ #k. NoNewCert( ) @ #k))) ∧
                 (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
                   ((RespReachVCA( tid1.1, oidI1, oidR1 ) @ #x) ∧
                    (RespReachVCA( tid2.1, oidI2, oidR2 ) @ #y)) ⇒
                   (#x = #y))) ∧
                (∀ tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
                  ((InitReachVCA( tid1.1, oid1, oidR1 ) @ #x) ∧
                   (InitReachVCA( tid2.1, oid2, oidR2 ) @ #y)) ⇒
                  (#x = #y))) ∧
               (∀ sid1.1 sid2.1 oid1 oid2 tid1.1 tid2.1 oidR1 oidR2 #x #y.
                 ((RStartKEX( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
                  (RStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
                 (#x = #y))) ∧
              (∀ sid1.1 sid2.1 oid1 oid2 tid1.1 tid2.1 oidR1 oidR2 #x #y.
                ((IStartKEX( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
                 (IStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
                (#x = #y))) ∧
             (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
               ((InitKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
                (InitKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
               (#x = #y))) ∧
            (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
              ((RespKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
               (RespKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
              (#x = #y))) ∧
           (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
             ((InitAcceptKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
              (InitAcceptKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
             (#x = #y))) ∧
          (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
            ((InitRequestPSKFinish( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
             (InitRequestPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
            (#x = #y))) ∧
         (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
           ((RespAcceptPSKFinish( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
            (RespAcceptPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
           (#x = #y))) ∧
        (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
          ((RequestCertificate( tid1.1, oidI1, oidR1 ) @ #x) ∧
           (RequestCertificate( tid2.1, oidI2, oidR2 ) @ #y)) ⇒
          (#x = #y))) ∧
       (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
         ((SendCertificate( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
          (SendCertificate( tid2.1, oidI2, oidR2, c2 ) @ #y)) ⇒
         (#x = #y))) ∧
      (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
        ((RequestDigest( tid1.1, oidI1, oidR1 ) @ #x) ∧
         (RequestDigest( tid2.1, oidI2, oidR2 ) @ #y)) ⇒
        (#x = #y))) ∧
     (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
       ((SendDigest( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
        (SendDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)) ⇒
       (#x = #y))) ∧
    (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
      ((ReceiveDigest( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
       (ReceiveDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)) ⇒
      (#x = #y))"
/*
guarded formula characterizing all satisfying traces:
"∃ sid1 sid2 tid1 tid2 oid oidR secrt #i #i1 #i2 #i3 #j1 #j2.
  (InitReachVCA( tid1, oid, oidR ) @ #i) ∧
  (InitKeyExchangeCert( sid1, tid1, oid, oidR ) @ #i1) ∧
  (RespKeyExchangeCert( sid2, tid2, oid, oidR, secrt ) @ #j1) ∧
  (InitAcceptKeyExchangeCert( sid1, tid1, oid, oidR, secrt ) @ #i2) ∧
  (InitRequestPSKFinish( sid1, tid1, oid, oidR, secrt ) @ #i3) ∧
  (RespAcceptPSKFinish( sid2, tid2, oid, oidR, secrt ) @ #j2)
 ∧
  (∀ someoid ltk pk1 #t. (Attacker( someoid, ltk, pk1 ) @ #t) ⇒ ⊥) ∧
  (∀ #k. (NotLoopOptions( ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (NoNewCert( ) @ #k) ⇒ ⊥) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
    (RespReachVCA( tid1.1, oidI1, oidR1 ) @ #x) ∧
    (RespReachVCA( tid2.1, oidI2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
    (InitReachVCA( tid1.1, oid1, oidR1 ) @ #x) ∧
    (InitReachVCA( tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 oid1 oid2 tid1.1 tid2.1 oidR1 oidR2 #x #y.
    (RStartKEX( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
    (RStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 oid1 oid2 tid1.1 tid2.1 oidR1 oidR2 #x #y.
    (IStartKEX( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
    (IStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
    (InitKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1 ) @ #x) ∧
    (InitKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (RespKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
    (RespKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (InitAcceptKeyExchangeCert( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
    (InitAcceptKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (InitRequestPSKFinish( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
    (InitRequestPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1.1 sid2.1 tid1.1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (RespAcceptPSKFinish( sid1.1, tid1.1, oid1, oidR1, s1 ) @ #x) ∧
    (RespAcceptPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
    (RequestCertificate( tid1.1, oidI1, oidR1 ) @ #x) ∧
    (RequestCertificate( tid2.1, oidI2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
    (SendCertificate( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
    (SendCertificate( tid2.1, oidI2, oidR2, c2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
    (RequestDigest( tid1.1, oidI1, oidR1 ) @ #x) ∧
    (RequestDigest( tid2.1, oidI2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
    (SendDigest( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
    (SendDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1.1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
    (ReceiveDigest( tid1.1, oidI1, oidR1, c1 ) @ #x) ∧
    (ReceiveDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)
   ⇒
    #x = #y)"
*/
simplify
solve( StateInit( ~tid, ~oid, ~oidR, vx, 'NULL', <V, C, A>,
                  (VCATranscript+<'Algorithms', 'NULL'>), optionsTranscript, 'NULL',
                  'NULL', 'START_GETALGORITHMS'
       ) ▶₀ #i )
  case I_Algorithms_Request
  solve( KeyExchangeInit( ~sid, ~tid, ~oid, ~oidR, pkR, digestR, version,
                          VCATrancriptI, (messageTranscript+<'Get_Key_Exchange', gke>), 'NULL',
                          'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
         ) ▶₀ #i1 )
    case I_Spawn_new_Session
    solve( KeyExchangeInit( ~sid, ~tid, ~oid, ~oidR, pk(~ltkR), digestR.1,
                            version.1, VCATrancriptI.1,
                            (messageTranscript+<'Key_Exchange_Resp', rsp>), ~privKey,
                            ~initSessionId.1, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'WAIT_KEY_RESP'
           ) ▶₀ #i2 )
      case I_KE_Request
      solve( KeyExchangeInit( ~sid, ~tid, ~oid, ~oidR, somepkR, digest,
                              version.1, VCATrancriptI.1,
                              (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                               <'PSK_Exchange_Resp', ker>+<'PSK_Finish', f>),
                              someprivKey, ~initSessionId.1, init_handshake_secret, hmac(z, 'salt_o'),
                              init_finished_key, resp_finished_key, bindSid, 'AFTER_KE'
             ) ▶₀ #i3 )
        case I_KE_ProcessAndVerify
        solve( KeyExchangeResp( ~sid.1, ~tidR, ~oid, ~oidR, somepkI, somedigestI,
                                version.1, VCATrancript,
                                (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                                'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
               ) ▶₀ #j1 )
          case R_Spawn_new_Session
          solve( !Cert( ~oidR, pk(~ltkR.1), certR ) ▶₁ #j1 )
            case A_getCertHonest
            solve( KeyExchangeResp( ~sid.1, ~tidR, ~oid, ~oidR, somepkI.1,
                                    digest_init, version.2, VCATrancript.1,
                                    (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                                     <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>+
                                     <'PSK_Finish_Rsp', 'NULL'>),
                                    init_handshake_secret, hmac(z, 'salt_o'), resp_finished_key,
                                    in_finished_key, bindSid, 'AFTER_KE'
                   ) ▶₀ #j2 )
              case R_KE_Response
              solve( !PSK( ~oid, ~oidR, ~key ) ▶₁ #j2 )
                case sharePSK
                solve( StateInit( ~tid, ~oid, ~oidR, version, axI, <VI, CI, AI>,
                                  VCATrancriptI, optionsTranscriptI, pk(~ltkR), digest, 'IDLE'
                       ) ▶₀ #vr.5 )
                  case I_Certificate_ProcessAndVerify_case_2
                  solve( StateResp( ~tidR, ~oid, ~oidR, version.1, axR, <VR.1, CR.1, AR>,
                                    VCATrancript, optionsTranscriptR, somepkI, digest_init, 'IDLE'
                         ) ▶₀ #vr.6 )
                    case R_Algorithms_Response
                    solve( StateInit( ~tid, ~oid, ~oidR, version, axI, <VI, CI.1, AI.1>,
                                      VCATrancriptI,
                                      (x+<'Certificate', tcert>+<'Digest', dig>+<'Get_Certificate', getcert>),
                                      somepkR, anyDigest, 'START_DIGEST'
                           ) ▶₀ #vr.12 )
                      case I_Digest_Request_case_01
                      solve( !KU( sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                          (<'Algorithms', 'Algorithms', version, ax>+
                                           <'Capabilities', 'Capabilities', version, CR>+
                                           <'Get_Capabilities', 'Get_Capabilities', version, ('PSK'+C1)>+
                                           <'Get_Version', 'Get_Version', '1'>+
                                           <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, a1, a2>+
                                           <'Version', 'Version', VR>), 
                                          h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                          (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, ~initSessionId, 
                                            ~nonce, 'g'^~newPrivKey>+
                                           <'Get_PSK_Exchange', 'NULL'>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, respSessionId, 
                                            'No_Mutual_auth', respNonce, respPublicKey, 'NULL', 'NULL'>+
                                           <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                           <'PSK_Finish_Rsp', 'NULL'>)
                                         >),
                                       ~ltkR)
                             ) @ #vk.22 )
                        case R_KE_Response
                        solve( !KU( h(sign(<~oidR, pk(~ltkR)>, ~rootkey)) ) @ #vk.60 )
                          case R_Digest_Response
                          solve( StateResp( ~tid.1, ~oidI, ~oidR, vx, ax.1, <V, C, A>,
                                            VCATranscript,
                                            (optionsTranscript+<'Digest', dig>+<'Get_Digest', getdig>),
                                            somepkI, digestI, 'IDLE'
                                 ) ▶₀ #vr.24 )
                            case R_Certificate_Response_case_2
                            solve( StateResp( ~tid.1, ~oidI, ~oidR, vx, ax.1, <V, C, A>,
                                              VCATranscript,
                                              (x+<'Certificate', tcert>+<'Digest', dig>+
                                               <'Get_Certificate', getcert>+<'Get_Digest', getdig>),
                                              somepkI, digestI, 'IDLE'
                                   ) ▶₀ #vr.27 )
                              case R_Spawn_new_Session
                              solve( !KU( ~initSessionId ) @ #vk.35 )
                                case I_KE_Request
                                solve( !KU( ~nonce ) @ #vk.37 )
                                  case I_KE_Request
                                  solve( !KU( ~respSessionId ) @ #vk.31 )
                                    case R_KE_Response
                                    solve( !KU( ~respNonce ) @ #vk.34 )
                                      case R_KE_Response
                                      solve( !KU( sign(<~oidR, pk(~ltkR)>, ~rootkey) ) @ #vk.61 )
                                        case A_getCertHonest
                                        solve( !KU( hmac(h(<
                                                            (<'Algorithms', 'Algorithms', version, ax>+
                                                             <'Capabilities', 'Capabilities', version, 
                                                              ('PSK'+C2)>+
                                                             <'Get_Capabilities', 'Get_Capabilities', 
                                                              version, ('PSK'+C1)>+
                                                             <'Get_Version', 'Get_Version', '1'>+
                                                             <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                              version, a1, a2>+
                                                             <'Version', 'Version', v1.1, v2.1>), 
                                                            h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                            (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                             <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                              version, ~initSessionId, ~nonce, 'g'^~newPrivKey
                                                             >+
                                                             <'Get_PSK_Exchange', 'NULL'>+
                                                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                              version, ~respSessionId, 'No_Mutual_auth', 
                                                              ~respNonce, 'g'^~respPrivKey, 
                                                              sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                                      (
                                                                       <'Algorithms', 'Algorithms', version, 
                                                                        ax>+
                                                                       <'Capabilities', 'Capabilities', 
                                                                        version, ('PSK'+C2)>+
                                                                       <'Get_Capabilities', 
                                                                        'Get_Capabilities', version, 
                                                                        ('PSK'+C1)>+
                                                                       <'Get_Version', 'Get_Version', '1'>+
                                                                       <'Negotiate_Algorithms', 
                                                                        'Negotiate_Algorithms', version, a1, 
                                                                        a2>+
                                                                       <'Version', 'Version', v1.1, v2.1>), 
                                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                      (<'Finish', 'NULL'>+
                                                                       <'Finish_Rsp', 'NULL'>+
                                                                       <'Get_Key_Exchange', 
                                                                        'Get_Key_Exchange', version, 
                                                                        ~initSessionId, ~nonce, 
                                                                        'g'^~newPrivKey>+
                                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                                       <'Key_Exchange_Resp', 
                                                                        'Key_Exchange_Resp', version, 
                                                                        ~respSessionId, 'No_Mutual_auth', 
                                                                        ~respNonce, 'g'^~respPrivKey, 'NULL', 
                                                                        'NULL'>+
                                                                       <'PSK_Exchange_Resp', 'NULL'>+
                                                                       <'PSK_Finish', 'NULL'>+
                                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                                     >),
                                                                   ~ltkR), 
                                                              'NULL'>+
                                                             <'PSK_Exchange_Resp', 'NULL'>+
                                                             <'PSK_Finish', 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>
                                                            )
                                                           >),
                                                         hkdf('cert',
                                                              hkdf('cert',
                                                                   hmac('g'^(~newPrivKey*~respPrivKey),
                                                                        'salt_o'),
                                                                   h(<
                                                                      (
                                                                       <'Algorithms', 'Algorithms', version, 
                                                                        ax>+
                                                                       <'Capabilities', 'Capabilities', 
                                                                        version, ('PSK'+C2)>+
                                                                       <'Get_Capabilities', 
                                                                        'Get_Capabilities', version, 
                                                                        ('PSK'+C1)>+
                                                                       <'Get_Version', 'Get_Version', '1'>+
                                                                       <'Negotiate_Algorithms', 
                                                                        'Negotiate_Algorithms', version, a1, 
                                                                        a2>+
                                                                       <'Version', 'Version', v1.1, v2.1>), 
                                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                      (<'Finish', 'NULL'>+
                                                                       <'Finish_Rsp', 'NULL'>+
                                                                       <'Get_Key_Exchange', 
                                                                        'Get_Key_Exchange', version, 
                                                                        ~initSessionId, ~nonce, 
                                                                        'g'^~newPrivKey>+
                                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                                       <'Key_Exchange_Resp', 
                                                                        'Key_Exchange_Resp', version, 
                                                                        ~respSessionId, 'No_Mutual_auth', 
                                                                        ~respNonce, 'g'^~respPrivKey, 
                                                                        sign(h(<version, 
                                                                                'Key_Exchange_Resp_Signing', 
                                                                                (
                                                                                 <'Algorithms', 'Algorithms', 
                                                                                  version, ax>+
                                                                                 <'Capabilities', 
                                                                                  'Capabilities', version, 
                                                                                  ('PSK'+C2)>+
                                                                                 <'Get_Capabilities', 
                                                                                  'Get_Capabilities', 
                                                                                  version, ('PSK'+C1)>+
                                                                                 <'Get_Version', 
                                                                                  'Get_Version', '1'>+
                                                                                 <'Negotiate_Algorithms', 
                                                                                  'Negotiate_Algorithms', 
                                                                                  version, a1, a2>+
                                                                                 <'Version', 'Version', v1.1, 
                                                                                  v2.1>
                                                                                ), 
                                                                                h(sign(<~oidR, pk(~ltkR)>,
                                                                                       ~rootkey)), 
                                                                                (<'Finish', 'NULL'>+
                                                                                 <'Finish_Rsp', 'NULL'>+
                                                                                 <'Get_Key_Exchange', 
                                                                                  'Get_Key_Exchange', 
                                                                                  version, ~initSessionId, 
                                                                                  ~nonce, 'g'^~newPrivKey>+
                                                                                 <'Get_PSK_Exchange', 'NULL'>+
                                                                                 <'Key_Exchange_Resp', 
                                                                                  'Key_Exchange_Resp', 
                                                                                  version, ~respSessionId, 
                                                                                  'No_Mutual_auth', 
                                                                                  ~respNonce, 
                                                                                  'g'^~respPrivKey, 'NULL', 
                                                                                  'NULL'>+
                                                                                 <'PSK_Exchange_Resp', 'NULL'
                                                                                 >+
                                                                                 <'PSK_Finish', 'NULL'>+
                                                                                 <'PSK_Finish_Rsp', 'NULL'>)
                                                                               >),
                                                                             ~ltkR), 
                                                                        'NULL'>+
                                                                       <'PSK_Exchange_Resp', 'NULL'>+
                                                                       <'PSK_Finish', 'NULL'>+
                                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                                     >),
                                                                   'resp_hs_data'),
                                                              version, 'finished'))
                                               ) @ #vk.37 )
                                          case R_KE_Response
                                          solve( !KU( senc(<'PSK_Finish', version, 
                                                            hmac(h(<
                                                                    (
                                                                     <'Algorithms', 'Algorithms', version, ax
                                                                     >+
                                                                     <'Capabilities', 'Capabilities', 
                                                                      version, ('PSK'+C2)>+
                                                                     <'Get_Capabilities', 'Get_Capabilities', 
                                                                      version, ('PSK'+C1)>+
                                                                     <'Get_Version', 'Get_Version', '1'>+
                                                                     <'Negotiate_Algorithms', 
                                                                      'Negotiate_Algorithms', version, a1, a2
                                                                     >+
                                                                     <'Version', 'Version', v1.1, v2.1>), 
                                                                    (<'Finish', 'NULL'>+
                                                                     <'Finish_Rsp', 'NULL'>+
                                                                     <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                                      version, ~initSessionId, ~nonce, 
                                                                      'g'^~newPrivKey>+
                                                                     <'Get_PSK_Exchange', 'NULL'>+
                                                                     <'Key_Exchange_Resp', 
                                                                      'Key_Exchange_Resp', version, 
                                                                      ~respSessionId, 'No_Mutual_auth', 
                                                                      ~respNonce, 'g'^~respPrivKey, 
                                                                      sign(h(<version, 
                                                                              'Key_Exchange_Resp_Signing', 
                                                                              (
                                                                               <'Algorithms', 'Algorithms', 
                                                                                version, ax>+
                                                                               <'Capabilities', 
                                                                                'Capabilities', version, 
                                                                                ('PSK'+C2)>+
                                                                               <'Get_Capabilities', 
                                                                                'Get_Capabilities', version, 
                                                                                ('PSK'+C1)>+
                                                                               <'Get_Version', 'Get_Version', 
                                                                                '1'>+
                                                                               <'Negotiate_Algorithms', 
                                                                                'Negotiate_Algorithms', 
                                                                                version, a1, a2>+
                                                                               <'Version', 'Version', v1.1, 
                                                                                v2.1>
                                                                              ), 
                                                                              h(sign(<~oidR, pk(~ltkR)>,
                                                                                     ~rootkey)), 
                                                                              (<'Finish', 'NULL'>+
                                                                               <'Finish_Rsp', 'NULL'>+
                                                                               <'Get_Key_Exchange', 
                                                                                'Get_Key_Exchange', version, 
                                                                                ~initSessionId, ~nonce, 
                                                                                'g'^~newPrivKey>+
                                                                               <'Get_PSK_Exchange', 'NULL'>+
                                                                               <'Key_Exchange_Resp', 
                                                                                'Key_Exchange_Resp', version, 
                                                                                ~respSessionId, 
                                                                                'No_Mutual_auth', ~respNonce, 
                                                                                'g'^~respPrivKey, 'NULL', 
                                                                                'NULL'>+
                                                                               <'PSK_Exchange_Resp', 'NULL'>+
                                                                               <'PSK_Finish', 'NULL'>+
                                                                               <'PSK_Finish_Rsp', 'NULL'>)
                                                                             >),
                                                                           ~ltkR), 
                                                                      hmac(h(<
                                                                              (
                                                                               <'Algorithms', 'Algorithms', 
                                                                                version, ax>+
                                                                               <'Capabilities', 
                                                                                'Capabilities', version, 
                                                                                ('PSK'+C2)>+
                                                                               <'Get_Capabilities', 
                                                                                'Get_Capabilities', version, 
                                                                                ('PSK'+C1)>+
                                                                               <'Get_Version', 'Get_Version', 
                                                                                '1'>+
                                                                               <'Negotiate_Algorithms', 
                                                                                'Negotiate_Algorithms', 
                                                                                version, a1, a2>+
                                                                               <'Version', 'Version', v1.1, 
                                                                                v2.1>
                                                                              ), 
                                                                              h(sign(<~oidR, pk(~ltkR)>,
                                                                                     ~rootkey)), 
                                                                              (<'Finish', 'NULL'>+
                                                                               <'Finish_Rsp', 'NULL'>+
                                                                               <'Get_Key_Exchange', 
                                                                                'Get_Key_Exchange', version, 
                                                                                ~initSessionId, ~nonce, 
                                                                                'g'^~newPrivKey>+
                                                                               <'Get_PSK_Exchange', 'NULL'>+
                                                                               <'Key_Exchange_Resp', 
                                                                                'Key_Exchange_Resp', version, 
                                                                                ~respSessionId, 
                                                                                'No_Mutual_auth', ~respNonce, 
                                                                                'g'^~respPrivKey, 
                                                                                sign(h(<version, 
                                                                                        'Key_Exchange_Resp_Signing', 
                                                                                        (
                                                                                         <'Algorithms', 
                                                                                          'Algorithms', 
                                                                                          version, ax>+
                                                                                         <'Capabilities', 
                                                                                          'Capabilities', 
                                                                                          version, ('PSK'+C2)
                                                                                         >+
                                                                                         <'Get_Capabilities', 
                                                                                          'Get_Capabilities', 
                                                                                          version, ('PSK'+C1)
                                                                                         >+
                                                                                         <'Get_Version', 
                                                                                          'Get_Version', '1'>+
                                                                                         <
                                                                                          'Negotiate_Algorithms', 
                                                                                          'Negotiate_Algorithms', 
                                                                                          version, a1, a2>+
                                                                                         <'Version', 
                                                                                          'Version', v1.1, 
                                                                                          v2.1>
                                                                                        ), 
                                                                                        h(sign(<~oidR, 
                                                                                                pk(~ltkR)>,
                                                                                               ~rootkey)), 
                                                                                        (<'Finish', 'NULL'>+
                                                                                         <'Finish_Rsp', 'NULL'
                                                                                         >+
                                                                                         <'Get_Key_Exchange', 
                                                                                          'Get_Key_Exchange', 
                                                                                          version, 
                                                                                          ~initSessionId, 
                                                                                          ~nonce, 
                                                                                          'g'^~newPrivKey>+
                                                                                         <'Get_PSK_Exchange', 
                                                                                          'NULL'>+
                                                                                         <
                                                                                          'Key_Exchange_Resp', 
                                                                                          'Key_Exchange_Resp', 
                                                                                          version, 
                                                                                          ~respSessionId, 
                                                                                          'No_Mutual_auth', 
                                                                                          ~respNonce, 
                                                                                          'g'^~respPrivKey, 
                                                                                          'NULL', 'NULL'>+
                                                                                         <
                                                                                          'PSK_Exchange_Resp', 
                                                                                          'NULL'>+
                                                                                         <'PSK_Finish', 'NULL'
                                                                                         >+
                                                                                         <'PSK_Finish_Rsp', 
                                                                                          'NULL'>
                                                                                        )
                                                                                       >),
                                                                                     ~ltkR), 
                                                                                'NULL'>+
                                                                               <'PSK_Exchange_Resp', 'NULL'>+
                                                                               <'PSK_Finish', 'NULL'>+
                                                                               <'PSK_Finish_Rsp', 'NULL'>)
                                                                             >),
                                                                           hkdf('cert',
                                                                                hkdf('cert',
                                                                                     hmac('g'^(~newPrivKey*
                                                                                               ~respPrivKey),
                                                                                          'salt_o'),
                                                                                     h(<
                                                                                        (
                                                                                         <'Algorithms', 
                                                                                          'Algorithms', 
                                                                                          version, ax>+
                                                                                         <'Capabilities', 
                                                                                          'Capabilities', 
                                                                                          version, ('PSK'+C2)
                                                                                         >+
                                                                                         <'Get_Capabilities', 
                                                                                          'Get_Capabilities', 
                                                                                          version, ('PSK'+C1)
                                                                                         >+
                                                                                         <'Get_Version', 
                                                                                          'Get_Version', '1'>+
                                                                                         <
                                                                                          'Negotiate_Algorithms', 
                                                                                          'Negotiate_Algorithms', 
                                                                                          version, a1, a2>+
                                                                                         <'Version', 
                                                                                          'Version', v1.1, 
                                                                                          v2.1>
                                                                                        ), 
                                                                                        h(sign(<~oidR, 
                                                                                                pk(~ltkR)>,
                                                                                               ~rootkey)), 
                                                                                        (<'Finish', 'NULL'>+
                                                                                         <'Finish_Rsp', 'NULL'
                                                                                         >+
                                                                                         <'Get_Key_Exchange', 
                                                                                          'Get_Key_Exchange', 
                                                                                          version, 
                                                                                          ~initSessionId, 
                                                                                          ~nonce, 
                                                                                          'g'^~newPrivKey>+
                                                                                         <'Get_PSK_Exchange', 
                                                                                          'NULL'>+
                                                                                         <
                                                                                          'Key_Exchange_Resp', 
                                                                                          'Key_Exchange_Resp', 
                                                                                          version, 
                                                                                          ~respSessionId, 
                                                                                          'No_Mutual_auth', 
                                                                                          ~respNonce, 
                                                                                          'g'^~respPrivKey, 
                                                                                          sign(h(<version, 
                                                                                                  'Key_Exchange_Resp_Signing', 
                                                                                                  (
                                                                                                   <
                                                                                                    'Algorithms', 
                                                                                                    'Algorithms', 
                                                                                                    version, 
                                                                                                    ax>+
                                                                                                   <
                                                                                                    'Capabilities', 
                                                                                                    'Capabilities', 
                                                                                                    version, 
                                                                                                    ('PSK'+C2)
                                                                                                   >+
                                                                                                   <
                                                                                                    'Get_Capabilities', 
                                                                                                    'Get_Capabilities', 
                                                                                                    version, 
                                                                                                    ('PSK'+C1)
                                                                                                   >+
                                                                                                   <
                                                                                                    'Get_Version', 
                                                                                                    'Get_Version', 
                                                                                                    '1'>+
                                                                                                   <
                                                                                                    'Negotiate_Algorithms', 
                                                                                                    'Negotiate_Algorithms', 
                                                                                                    version, 
                                                                                                    a1, a2>+
                                                                                                   <
                                                                                                    'Version', 
                                                                                                    'Version', 
                                                                                                    v1.1, v2.1
                                                                                                   >
                                                                                                  ), 
                                                                                                  h(sign(<
                                                                                                          ~oidR, 
                                                                                                          pk(~ltkR)
                                                                                                         >,
                                                                                                         ~rootkey)), 
                                                                                                  (
                                                                                                   <'Finish', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'Finish_Rsp', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'Get_Key_Exchange', 
                                                                                                    'Get_Key_Exchange', 
                                                                                                    version, 
                                                                                                    ~initSessionId, 
                                                                                                    ~nonce, 
                                                                                                    'g'^~newPrivKey
                                                                                                   >+
                                                                                                   <
                                                                                                    'Get_PSK_Exchange', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'Key_Exchange_Resp', 
                                                                                                    'Key_Exchange_Resp', 
                                                                                                    version, 
                                                                                                    ~respSessionId, 
                                                                                                    'No_Mutual_auth', 
                                                                                                    ~respNonce, 
                                                                                                    'g'^~respPrivKey, 
                                                                                                    'NULL', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'PSK_Exchange_Resp', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'PSK_Finish', 
                                                                                                    'NULL'>+
                                                                                                   <
                                                                                                    'PSK_Finish_Rsp', 
                                                                                                    'NULL'>
                                                                                                  )
                                                                                                 >),
                                                                                               ~ltkR), 
                                                                                          'NULL'>+
                                                                                         <
                                                                                          'PSK_Exchange_Resp', 
                                                                                          'NULL'>+
                                                                                         <'PSK_Finish', 'NULL'
                                                                                         >+
                                                                                         <'PSK_Finish_Rsp', 
                                                                                          'NULL'>
                                                                                        )
                                                                                       >),
                                                                                     'resp_hs_data'),
                                                                                version, 'finished'))
                                                                     >+
                                                                     <'PSK_Exchange_Resp', 'NULL'>+
                                                                     <'PSK_Finish', 'PSK_Finish', version, 
                                                                      'NULL'>+
                                                                     <'PSK_Finish_Rsp', 'NULL'>)
                                                                   >),
                                                                 hkdf('cert',
                                                                      hkdf('cert',
                                                                           hmac('g'^(~newPrivKey*~respPrivKey
                                                                                    ),
                                                                                'salt_o'),
                                                                           h(<
                                                                              (
                                                                               <'Algorithms', 'Algorithms', 
                                                                                version, ax>+
                                                                               <'Capabilities', 
                                                                                'Capabilities', version, 
                                                                                ('PSK'+C2)>+
                                                                               <'Get_Capabilities', 
                                                                                'Get_Capabilities', version, 
                                                                                ('PSK'+C1)>+
                                                                               <'Get_Version', 'Get_Version', 
                                                                                '1'>+
                                                                               <'Negotiate_Algorithms', 
                                                                                'Negotiate_Algorithms', 
                                                                                version, a1, a2>+
                                                                               <'Version', 'Version', v1.1, 
                                                                                v2.1>
                                                                              ), 
                                                                              h(sign(<~oidR, pk(~ltkR)>,
                                                                                     ~rootkey)), 
                                                                              (<'Finish', 'NULL'>+
                                                                               <'Finish_Rsp', 'NULL'>+
                                                                               <'Get_Key_Exchange', 
                                                                                'Get_Key_Exchange', version, 
                                                                                ~initSessionId, ~nonce, 
                                                                                'g'^~newPrivKey>+
                                                                               <'Get_PSK_Exchange', 'NULL'>+
                                                                               <'Key_Exchange_Resp', 
                                                                                'Key_Exchange_Resp', version, 
                                                                                ~respSessionId, 
                                                                                'No_Mutual_auth', ~respNonce, 
                                                                                'g'^~respPrivKey, 
                                                                                sign(h(<version, 
                                                                                        'Key_Exchange_Resp_Signing', 
                                                                                        (
                                                                                         <'Algorithms', 
                                                                                          'Algorithms', 
                                                                                          version, ax>+
                                                                                         <'Capabilities', 
                                                                                          'Capabilities', 
                                                                                          version, ('PSK'+C2)
                                                                                         >+
                                                                                         <'Get_Capabilities', 
                                                                                          'Get_Capabilities', 
                                                                                          version, ('PSK'+C1)
                                                                                         >+
                                                                                         <'Get_Version', 
                                                                                          'Get_Version', '1'>+
                                                                                         <
                                                                                          'Negotiate_Algorithms', 
                                                                                          'Negotiate_Algorithms', 
                                                                                          version, a1, a2>+
                                                                                         <'Version', 
                                                                                          'Version', v1.1, 
                                                                                          v2.1>
                                                                                        ), 
                                                                                        h(sign(<~oidR, 
                                                                                                pk(~ltkR)>,
                                                                                               ~rootkey)), 
                                                                                        (<'Finish', 'NULL'>+
                                                                                         <'Finish_Rsp', 'NULL'
                                                                                         >+
                                                                                         <'Get_Key_Exchange', 
                                                                                          'Get_Key_Exchange', 
                                                                                          version, 
                                                                                          ~initSessionId, 
                                                                                          ~nonce, 
                                                                                          'g'^~newPrivKey>+
                                                                                         <'Get_PSK_Exchange', 
                                                                                          'NULL'>+
                                                                                         <
                                                                                          'Key_Exchange_Resp', 
                                                                                          'Key_Exchange_Resp', 
                                                                                          version, 
                                                                                          ~respSessionId, 
                                                                                          'No_Mutual_auth', 
                                                                                          ~respNonce, 
                                                                                          'g'^~respPrivKey, 
                                                                                          'NULL', 'NULL'>+
                                                                                         <
                                                                                          'PSK_Exchange_Resp', 
                                                                                          'NULL'>+
                                                                                         <'PSK_Finish', 'NULL'
                                                                                         >+
                                                                                         <'PSK_Finish_Rsp', 
                                                                                          'NULL'>
                                                                                        )
                                                                                       >),
                                                                                     ~ltkR), 
                                                                                'NULL'>+
                                                                               <'PSK_Exchange_Resp', 'NULL'>+
                                                                               <'PSK_Finish', 'NULL'>+
                                                                               <'PSK_Finish_Rsp', 'NULL'>)
                                                                             >),
                                                                           'init_hs_data'),
                                                                      version, 'finished'))
                                                           >,
                                                           hkdf('cert',
                                                                hmac('g'^(~newPrivKey*~respPrivKey),
                                                                     'salt_o'),
                                                                h(<
                                                                   (<'Algorithms', 'Algorithms', version, ax>+
                                                                    <'Capabilities', 'Capabilities', version, 
                                                                     ('PSK'+C2)>+
                                                                    <'Get_Capabilities', 'Get_Capabilities', 
                                                                     version, ('PSK'+C1)>+
                                                                    <'Get_Version', 'Get_Version', '1'>+
                                                                    <'Negotiate_Algorithms', 
                                                                     'Negotiate_Algorithms', version, a1, a2>+
                                                                    <'Version', 'Version', v1.1, v2.1>), 
                                                                   h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                   (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                                    <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                                     version, ~initSessionId, ~nonce, 
                                                                     'g'^~newPrivKey>+
                                                                    <'Get_PSK_Exchange', 'NULL'>+
                                                                    <'Key_Exchange_Resp', 
                                                                     'Key_Exchange_Resp', version, 
                                                                     ~respSessionId, 'No_Mutual_auth', 
                                                                     ~respNonce, 'g'^~respPrivKey, 
                                                                     sign(h(<version, 
                                                                             'Key_Exchange_Resp_Signing', 
                                                                             (
                                                                              <'Algorithms', 'Algorithms', 
                                                                               version, ax>+
                                                                              <'Capabilities', 
                                                                               'Capabilities', version, 
                                                                               ('PSK'+C2)>+
                                                                              <'Get_Capabilities', 
                                                                               'Get_Capabilities', version, 
                                                                               ('PSK'+C1)>+
                                                                              <'Get_Version', 'Get_Version', 
                                                                               '1'>+
                                                                              <'Negotiate_Algorithms', 
                                                                               'Negotiate_Algorithms', 
                                                                               version, a1, a2>+
                                                                              <'Version', 'Version', v1.1, 
                                                                               v2.1>
                                                                             ), 
                                                                             h(sign(<~oidR, pk(~ltkR)>,
                                                                                    ~rootkey)), 
                                                                             (<'Finish', 'NULL'>+
                                                                              <'Finish_Rsp', 'NULL'>+
                                                                              <'Get_Key_Exchange', 
                                                                               'Get_Key_Exchange', version, 
                                                                               ~initSessionId, ~nonce, 
                                                                               'g'^~newPrivKey>+
                                                                              <'Get_PSK_Exchange', 'NULL'>+
                                                                              <'Key_Exchange_Resp', 
                                                                               'Key_Exchange_Resp', version, 
                                                                               ~respSessionId, 
                                                                               'No_Mutual_auth', ~respNonce, 
                                                                               'g'^~respPrivKey, 'NULL', 
                                                                               'NULL'>+
                                                                              <'PSK_Exchange_Resp', 'NULL'>+
                                                                              <'PSK_Finish', 'NULL'>+
                                                                              <'PSK_Finish_Rsp', 'NULL'>)
                                                                            >),
                                                                          ~ltkR), 
                                                                     'NULL'>+
                                                                    <'PSK_Exchange_Resp', 'NULL'>+
                                                                    <'PSK_Finish', 'NULL'>+
                                                                    <'PSK_Finish_Rsp', 'NULL'>)
                                                                  >),
                                                                'init_hs_data'))
                                                 ) @ #vk.40 )
                                            case I_PSK_Finish
                                            solve( !KU( 'g'^~newPrivKey ) @ #vk.40 )
                                              case I_KE_Request
                                              solve( !KU( 'g'^~respPrivKey ) @ #vk.39 )
                                                case R_KE_Response
                                                SOLVED // trace found
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Attack_Session_Mode_Switch [heuristic=S,
                                  hide_lemma=RespOptionLoopBreaker, hide_lemma=cert_create_resp,
                                  hide_lemma=cert_create_init, hide_lemma=rootCert_before_Rcert,
                                  hide_lemma=rootCert_before_Icert, hide_lemma=resp_stored_cert,
                                  hide_lemma=init_stored_cert]:
  exists-trace
  "∃ sid2 tid2 oid oidR secrt #j1 #j2.
    ((((((((((((((((((RespKeyExchangeCert( sid2, tid2, oid, oidR, secrt
                      ) @ #j1) ∧
                     (RespAcceptPSKFinish( sid2, tid2, oid, oidR, secrt ) @ #j2)) ∧
                    (¬(∃ #k. NotLoopOptions( ) @ #k))) ∧
                   (¬(∃ #k. NoOldCert( ) @ #k))) ∧
                  (¬(∃ tid1 #k. InitReachVCA( tid1, oid, oidR ) @ #k))) ∧
                 (¬(∃ sid1 tid1 oid1 oidR1 #t.
                     InitKeyExchangeCert( sid1, tid1, oid1, oidR1 ) @ #t))) ∧
                (¬(∃ sid1 tid1 oid1 oidR1 s1 #t.
                    InitAcceptKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #t))) ∧
               (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
                 ((RespReachVCA( tid1, oidI1, oidR1 ) @ #x) ∧
                  (RespReachVCA( tid2.1, oidI2, oidR2 ) @ #y)) ⇒
                 (#x = #y))) ∧
              (∀ tid1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
                ((InitReachVCA( tid1, oid1, oidR1 ) @ #x) ∧
                 (InitReachVCA( tid2.1, oid2, oidR2 ) @ #y)) ⇒
                (#x = #y))) ∧
             (∀ sid1 sid2.1 oid1 oid2 tid1 tid2.1 oidR1 oidR2 #x #y.
               ((IStartKEX( sid1, tid1, oid1, oidR1 ) @ #x) ∧
                (IStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
               (#x = #y))) ∧
            (∀ sid1 sid2.1 oid1 oid2 tid1 tid2.1 oidR1 oidR2 #x #y.
              ((RStartKEX( sid1, tid1, oid1, oidR1 ) @ #x) ∧
               (RStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
              (#x = #y))) ∧
           (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
             ((InitKeyExchangeCert( sid1, tid1, oid1, oidR1 ) @ #x) ∧
              (InitKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2 ) @ #y)) ⇒
             (#x = #y))) ∧
          (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
            ((RespKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
             (RespKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
            (#x = #y))) ∧
         (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
           ((InitAcceptKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
            (InitAcceptKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
           (#x = #y))) ∧
        (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
          ((InitRequestPSKFinish( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
           (InitRequestPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
          (#x = #y))) ∧
       (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
         ((RespAcceptPSKFinish( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
          (RespAcceptPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)) ⇒
         (#x = #y))) ∧
      (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
        ((RequestCertificate( tid1, oidI1, oidR1 ) @ #x) ∧
         (RequestCertificate( tid2.1, oidI2, oidR2 ) @ #y)) ⇒
        (#x = #y))) ∧
     (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
       ((SendCertificate( tid1, oidI1, oidR1, c1 ) @ #x) ∧
        (SendCertificate( tid2.1, oidI2, oidR2, c2 ) @ #y)) ⇒
       (#x = #y))) ∧
    (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
      ((SendDigest( tid1, oidI1, oidR1, c1 ) @ #x) ∧
       (SendDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)) ⇒
      (#x = #y))"
/*
guarded formula characterizing all satisfying traces:
"∃ sid2 tid2 oid oidR secrt #j1 #j2.
  (RespKeyExchangeCert( sid2, tid2, oid, oidR, secrt ) @ #j1) ∧
  (RespAcceptPSKFinish( sid2, tid2, oid, oidR, secrt ) @ #j2)
 ∧
  (∀ #k. (NotLoopOptions( ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (NoOldCert( ) @ #k) ⇒ ⊥) ∧
  (∀ tid1 #k. (InitReachVCA( tid1, oid, oidR ) @ #k) ⇒ ⊥) ∧
  (∀ sid1 tid1 oid1 oidR1 #t.
    (InitKeyExchangeCert( sid1, tid1, oid1, oidR1 ) @ #t) ⇒ ⊥) ∧
  (∀ sid1 tid1 oid1 oidR1 s1 #t.
    (InitAcceptKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #t) ⇒ ⊥) ∧
  (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
    (RespReachVCA( tid1, oidI1, oidR1 ) @ #x) ∧
    (RespReachVCA( tid2.1, oidI2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
    (InitReachVCA( tid1, oid1, oidR1 ) @ #x) ∧
    (InitReachVCA( tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 oid1 oid2 tid1 tid2.1 oidR1 oidR2 #x #y.
    (IStartKEX( sid1, tid1, oid1, oidR1 ) @ #x) ∧
    (IStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 oid1 oid2 tid1 tid2.1 oidR1 oidR2 #x #y.
    (RStartKEX( sid1, tid1, oid1, oidR1 ) @ #x) ∧
    (RStartKEX( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 #x #y.
    (InitKeyExchangeCert( sid1, tid1, oid1, oidR1 ) @ #x) ∧
    (InitKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (RespKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
    (RespKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (InitAcceptKeyExchangeCert( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
    (InitAcceptKeyExchangeCert( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (InitRequestPSKFinish( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
    (InitRequestPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ sid1 sid2.1 tid1 tid2.1 oid1 oid2 oidR1 oidR2 s1 s2 #x #y.
    (RespAcceptPSKFinish( sid1, tid1, oid1, oidR1, s1 ) @ #x) ∧
    (RespAcceptPSKFinish( sid2.1, tid2.1, oid2, oidR2, s2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 #x #y.
    (RequestCertificate( tid1, oidI1, oidR1 ) @ #x) ∧
    (RequestCertificate( tid2.1, oidI2, oidR2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
    (SendCertificate( tid1, oidI1, oidR1, c1 ) @ #x) ∧
    (SendCertificate( tid2.1, oidI2, oidR2, c2 ) @ #y)
   ⇒
    #x = #y) ∧
  (∀ tid1 tid2.1 oidI1 oidI2 oidR1 oidR2 c1 c2 #x #y.
    (SendDigest( tid1, oidI1, oidR1, c1 ) @ #x) ∧
    (SendDigest( tid2.1, oidI2, oidR2, c2 ) @ #y)
   ⇒
    #x = #y)"
*/
simplify
solve( KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI, somedigestI,
                        version, VCATrancript,
                        (messageTranscript+<'Get_Key_Exchange', gke>+<'Key_Exchange_Resp', ker>),
                        'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'START_KE'
       ) ▶₀ #j1 )
  case R_Spawn_new_Session
  solve( !Cert( ~oidR, pk(~ltkR), certR ) ▶₁ #j1 )
    case A_getCertHonest
    solve( KeyExchangeResp( ~sid, ~tidR, ~oidI, ~oidR, somepkI.1,
                            digest_init, version.1, VCATrancript.1,
                            (messageTranscript_empty+<'Get_PSK_Exchange', gke>+
                             <'PSK_Exchange_Resp', ker>+<'PSK_Finish', 'NULL'>+
                             <'PSK_Finish_Rsp', 'NULL'>),
                            init_handshake_secret, hmac(z, 'salt_o'), resp_finished_key,
                            in_finished_key, bindSid, 'AFTER_KE'
           ) ▶₀ #j2 )
      case R_KE_Response
      solve( !PSK( ~oidI, ~oidR, ~key ) ▶₁ #j2 )
        case sharePSK
        solve( StateResp( ~tidR, ~oidI, ~oidR, version, axR, <VR, CR, AR>,
                          VCATrancript, optionsTranscriptR, somepkI, digest_init, 'IDLE'
               ) ▶₀ #vr )
          case R_Algorithms_Response
          solve( !KU( senc(<'PSK_Finish', version, 
                            hmac(h(<
                                    (<'Algorithms', 'Algorithms', version, axR>+
                                     <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                     <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                     <'Get_Version', 'Get_Version', '1'>+
                                     <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                     <'Version', 'Version', v1, v2>), 
                                    (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                     <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                      publicKey>+
                                     <'Get_PSK_Exchange', 'NULL'>+
                                     <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                      'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                      sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                              (<'Algorithms', 'Algorithms', version, axR>+
                                               <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                               <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                               <'Get_Version', 'Get_Version', '1'>+
                                               <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                               <'Version', 'Version', v1, v2>), 
                                              h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                              (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                initSessionId, nonce, publicKey>+
                                               <'Get_PSK_Exchange', 'NULL'>+
                                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                'g'^~respPrivKey, 'NULL', 'NULL'>+
                                               <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                               <'PSK_Finish_Rsp', 'NULL'>)
                                             >),
                                           ~ltkR), 
                                      hmac(h(<
                                              (<'Algorithms', 'Algorithms', version, axR>+
                                               <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                               <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                               <'Get_Version', 'Get_Version', '1'>+
                                               <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                               <'Version', 'Version', v1, v2>), 
                                              h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                              (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                initSessionId, nonce, publicKey>+
                                               <'Get_PSK_Exchange', 'NULL'>+
                                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                'g'^~respPrivKey, 
                                                sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                        (<'Algorithms', 'Algorithms', version, axR>+
                                                         <'Capabilities', 'Capabilities', version, ('PSK'+C2)
                                                         >+
                                                         <'Get_Capabilities', 'Get_Capabilities', version, CI
                                                         >+
                                                         <'Get_Version', 'Get_Version', '1'>+
                                                         <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                          version, AI>+
                                                         <'Version', 'Version', v1, v2>), 
                                                        h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                        (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                          initSessionId, nonce, publicKey>+
                                                         <'Get_PSK_Exchange', 'NULL'>+
                                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                          ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                          'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                         <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                         <'PSK_Finish_Rsp', 'NULL'>)
                                                       >),
                                                     ~ltkR), 
                                                'NULL'>+
                                               <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                               <'PSK_Finish_Rsp', 'NULL'>)
                                             >),
                                           hkdf('cert',
                                                hkdf('cert', hmac(z, 'salt_o'),
                                                     h(<
                                                        (<'Algorithms', 'Algorithms', version, axR>+
                                                         <'Capabilities', 'Capabilities', version, ('PSK'+C2)
                                                         >+
                                                         <'Get_Capabilities', 'Get_Capabilities', version, CI
                                                         >+
                                                         <'Get_Version', 'Get_Version', '1'>+
                                                         <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                          version, AI>+
                                                         <'Version', 'Version', v1, v2>), 
                                                        h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                        (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                          initSessionId, nonce, publicKey>+
                                                         <'Get_PSK_Exchange', 'NULL'>+
                                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                          ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                          'g'^~respPrivKey, 
                                                          sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                                  (<'Algorithms', 'Algorithms', version, axR>+
                                                                   <'Capabilities', 'Capabilities', version, 
                                                                    ('PSK'+C2)>+
                                                                   <'Get_Capabilities', 'Get_Capabilities', 
                                                                    version, CI>+
                                                                   <'Get_Version', 'Get_Version', '1'>+
                                                                   <'Negotiate_Algorithms', 
                                                                    'Negotiate_Algorithms', version, AI>+
                                                                   <'Version', 'Version', v1, v2>), 
                                                                  h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                  (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                                   <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                                    version, initSessionId, nonce, publicKey>+
                                                                   <'Get_PSK_Exchange', 'NULL'>+
                                                                   <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                                    version, ~respSessionId, 
                                                                    'No_Mutual_auth', ~respNonce, 
                                                                    'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                                   <'PSK_Exchange_Resp', 'NULL'>+
                                                                   <'PSK_Finish', 'NULL'>+
                                                                   <'PSK_Finish_Rsp', 'NULL'>)
                                                                 >),
                                                               ~ltkR), 
                                                          'NULL'>+
                                                         <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                         <'PSK_Finish_Rsp', 'NULL'>)
                                                       >),
                                                     'resp_hs_data'),
                                                version, 'finished'))
                                     >+
                                     <'PSK_Exchange_Resp', 'NULL'>+
                                     <'PSK_Finish', 'PSK_Finish', version, 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
                                   >),
                                 hkdf('cert',
                                      hkdf('cert', hmac(z, 'salt_o'),
                                           h(<
                                              (<'Algorithms', 'Algorithms', version, axR>+
                                               <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                               <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                               <'Get_Version', 'Get_Version', '1'>+
                                               <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                               <'Version', 'Version', v1, v2>), 
                                              h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                              (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                               <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                initSessionId, nonce, publicKey>+
                                               <'Get_PSK_Exchange', 'NULL'>+
                                               <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                'g'^~respPrivKey, 
                                                sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                        (<'Algorithms', 'Algorithms', version, axR>+
                                                         <'Capabilities', 'Capabilities', version, ('PSK'+C2)
                                                         >+
                                                         <'Get_Capabilities', 'Get_Capabilities', version, CI
                                                         >+
                                                         <'Get_Version', 'Get_Version', '1'>+
                                                         <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                          version, AI>+
                                                         <'Version', 'Version', v1, v2>), 
                                                        h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                        (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                         <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                          initSessionId, nonce, publicKey>+
                                                         <'Get_PSK_Exchange', 'NULL'>+
                                                         <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                          ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                          'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                         <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                         <'PSK_Finish_Rsp', 'NULL'>)
                                                       >),
                                                     ~ltkR), 
                                                'NULL'>+
                                               <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                               <'PSK_Finish_Rsp', 'NULL'>)
                                             >),
                                           'init_hs_data'),
                                      version, 'finished'))
                           >,
                           hkdf('cert', hmac(z, 'salt_o'),
                                h(<
                                   (<'Algorithms', 'Algorithms', version, axR>+
                                    <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                    <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                    <'Get_Version', 'Get_Version', '1'>+
                                    <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                    <'Version', 'Version', v1, v2>), 
                                   h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                   (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Get_PSK_Exchange', 'NULL'>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                             (<'Algorithms', 'Algorithms', version, axR>+
                                              <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                              <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                              <'Get_Version', 'Get_Version', '1'>+
                                              <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                              <'Version', 'Version', v1, v2>), 
                                             h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                             (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Get_PSK_Exchange', 'NULL'>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>+
                                              <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                              <'PSK_Finish_Rsp', 'NULL'>)
                                            >),
                                          ~ltkR), 
                                     'NULL'>+
                                    <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                    <'PSK_Finish_Rsp', 'NULL'>)
                                  >),
                                'init_hs_data'))
                 ) @ #vk.11 )
            case c_senc
            solve( !KU( hkdf('cert', hmac(z, 'salt_o'),
                             h(<
                                (<'Algorithms', 'Algorithms', version, axR>+
                                 <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                 <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                 <'Get_Version', 'Get_Version', '1'>+
                                 <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                 <'Version', 'Version', v1, v2>), 
                                h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                 <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                  publicKey>+
                                 <'Get_PSK_Exchange', 'NULL'>+
                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                  'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                  sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                          (<'Algorithms', 'Algorithms', version, axR>+
                                           <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                           <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                           <'Get_Version', 'Get_Version', '1'>+
                                           <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                           <'Version', 'Version', v1, v2>), 
                                          h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                          (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                            nonce, publicKey>+
                                           <'Get_PSK_Exchange', 'NULL'>+
                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                            ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                            'NULL', 'NULL'>+
                                           <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                           <'PSK_Finish_Rsp', 'NULL'>)
                                         >),
                                       ~ltkR), 
                                  'NULL'>+
                                 <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                 <'PSK_Finish_Rsp', 'NULL'>)
                               >),
                             'init_hs_data')
                   ) @ #vk.41 )
              case c_hkdf
              solve( !KU( hmac(h(<
                                  (<'Algorithms', 'Algorithms', version, axR>+
                                   <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                   <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                   <'Get_Version', 'Get_Version', '1'>+
                                   <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                   <'Version', 'Version', v1, v2>), 
                                  (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                   <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                    publicKey>+
                                   <'Get_PSK_Exchange', 'NULL'>+
                                   <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                    'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                    sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                            (<'Algorithms', 'Algorithms', version, axR>+
                                             <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                             <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                             <'Get_Version', 'Get_Version', '1'>+
                                             <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                             <'Version', 'Version', v1, v2>), 
                                            h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                            (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                             <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                              nonce, publicKey>+
                                             <'Get_PSK_Exchange', 'NULL'>+
                                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                              ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                              'NULL', 'NULL'>+
                                             <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                             <'PSK_Finish_Rsp', 'NULL'>)
                                           >),
                                         ~ltkR), 
                                    hmac(h(<
                                            (<'Algorithms', 'Algorithms', version, axR>+
                                             <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                             <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                             <'Get_Version', 'Get_Version', '1'>+
                                             <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                             <'Version', 'Version', v1, v2>), 
                                            h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                            (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                             <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                              nonce, publicKey>+
                                             <'Get_PSK_Exchange', 'NULL'>+
                                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                              ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                              sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                      (<'Algorithms', 'Algorithms', version, axR>+
                                                       <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                       <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                       <'Get_Version', 'Get_Version', '1'>+
                                                       <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                        version, AI>+
                                                       <'Version', 'Version', v1, v2>), 
                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                      (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                        initSessionId, nonce, publicKey>+
                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                        ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                        'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                       <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                     >),
                                                   ~ltkR), 
                                              'NULL'>+
                                             <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                             <'PSK_Finish_Rsp', 'NULL'>)
                                           >),
                                         hkdf('cert',
                                              hkdf('cert', hmac(z, 'salt_o'),
                                                   h(<
                                                      (<'Algorithms', 'Algorithms', version, axR>+
                                                       <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                       <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                       <'Get_Version', 'Get_Version', '1'>+
                                                       <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                        version, AI>+
                                                       <'Version', 'Version', v1, v2>), 
                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                      (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                        initSessionId, nonce, publicKey>+
                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                        ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                        'g'^~respPrivKey, 
                                                        sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                                (<'Algorithms', 'Algorithms', version, axR>+
                                                                 <'Capabilities', 'Capabilities', version, 
                                                                  ('PSK'+C2)>+
                                                                 <'Get_Capabilities', 'Get_Capabilities', 
                                                                  version, CI>+
                                                                 <'Get_Version', 'Get_Version', '1'>+
                                                                 <'Negotiate_Algorithms', 
                                                                  'Negotiate_Algorithms', version, AI>+
                                                                 <'Version', 'Version', v1, v2>), 
                                                                h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                                 <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                                  version, initSessionId, nonce, publicKey>+
                                                                 <'Get_PSK_Exchange', 'NULL'>+
                                                                 <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                                  version, ~respSessionId, 'No_Mutual_auth', 
                                                                  ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'
                                                                 >+
                                                                 <'PSK_Exchange_Resp', 'NULL'>+
                                                                 <'PSK_Finish', 'NULL'>+
                                                                 <'PSK_Finish_Rsp', 'NULL'>)
                                                               >),
                                                             ~ltkR), 
                                                        'NULL'>+
                                                       <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                     >),
                                                   'resp_hs_data'),
                                              version, 'finished'))
                                   >+
                                   <'PSK_Exchange_Resp', 'NULL'>+
                                   <'PSK_Finish', 'PSK_Finish', version, 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
                                 >),
                               hkdf('cert',
                                    hkdf('cert', hmac(z, 'salt_o'),
                                         h(<
                                            (<'Algorithms', 'Algorithms', version, axR>+
                                             <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                             <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                             <'Get_Version', 'Get_Version', '1'>+
                                             <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                             <'Version', 'Version', v1, v2>), 
                                            h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                            (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                             <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                              nonce, publicKey>+
                                             <'Get_PSK_Exchange', 'NULL'>+
                                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                              ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                              sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                      (<'Algorithms', 'Algorithms', version, axR>+
                                                       <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                       <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                       <'Get_Version', 'Get_Version', '1'>+
                                                       <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                        version, AI>+
                                                       <'Version', 'Version', v1, v2>), 
                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                      (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                       <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                        initSessionId, nonce, publicKey>+
                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                       <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                        ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                        'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                       <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                     >),
                                                   ~ltkR), 
                                              'NULL'>+
                                             <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                             <'PSK_Finish_Rsp', 'NULL'>)
                                           >),
                                         'init_hs_data'),
                                    version, 'finished'))
                     ) @ #vk.43 )
                case c_hmac
                solve( !KU( hkdf('cert',
                                 hkdf('cert', hmac(z, 'salt_o'),
                                      h(<
                                         (<'Algorithms', 'Algorithms', version, axR>+
                                          <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                          <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                          <'Get_Version', 'Get_Version', '1'>+
                                          <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                          <'Version', 'Version', v1, v2>), 
                                         h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                         (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                          <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                           nonce, publicKey>+
                                          <'Get_PSK_Exchange', 'NULL'>+
                                          <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                           'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                           sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                   (<'Algorithms', 'Algorithms', version, axR>+
                                                    <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                    <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                    <'Get_Version', 'Get_Version', '1'>+
                                                    <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, 
                                                     AI>+
                                                    <'Version', 'Version', v1, v2>), 
                                                   h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                   (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                     initSessionId, nonce, publicKey>+
                                                    <'Get_PSK_Exchange', 'NULL'>+
                                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                     ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                     'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                    <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                    <'PSK_Finish_Rsp', 'NULL'>)
                                                  >),
                                                ~ltkR), 
                                           'NULL'>+
                                          <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                          <'PSK_Finish_Rsp', 'NULL'>)
                                        >),
                                      'init_hs_data'),
                                 version, 'finished')
                       ) @ #vk.49 )
                  case c_hkdf
                  solve( !KU( h(<
                                 (<'Algorithms', 'Algorithms', version, axR>+
                                  <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                  <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                  <'Get_Version', 'Get_Version', '1'>+
                                  <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                  <'Version', 'Version', v1, v2>), 
                                 h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                 (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                  <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                   publicKey>+
                                  <'Get_PSK_Exchange', 'NULL'>+
                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                   'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                   sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                           (<'Algorithms', 'Algorithms', version, axR>+
                                            <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                            <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                            <'Get_Version', 'Get_Version', '1'>+
                                            <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                            <'Version', 'Version', v1, v2>), 
                                           h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                           (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                            <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, 
                                             nonce, publicKey>+
                                            <'Get_PSK_Exchange', 'NULL'>+
                                            <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                             ~respSessionId, 'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                             'NULL', 'NULL'>+
                                            <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                            <'PSK_Finish_Rsp', 'NULL'>)
                                          >),
                                        ~ltkR), 
                                   'NULL'>+
                                  <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                  <'PSK_Finish_Rsp', 'NULL'>)
                                >)
                         ) @ #vk.47 )
                    case c_h
                    solve( !KU( h(<
                                   (<'Algorithms', 'Algorithms', version, axR>+
                                    <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                    <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                    <'Get_Version', 'Get_Version', '1'>+
                                    <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                    <'Version', 'Version', v1, v2>), 
                                   (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                    <'Get_Key_Exchange', 'Get_Key_Exchange', version, initSessionId, nonce, 
                                     publicKey>+
                                    <'Get_PSK_Exchange', 'NULL'>+
                                    <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, ~respSessionId, 
                                     'No_Mutual_auth', ~respNonce, 'g'^~respPrivKey, 
                                     sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                             (<'Algorithms', 'Algorithms', version, axR>+
                                              <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                              <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                              <'Get_Version', 'Get_Version', '1'>+
                                              <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                              <'Version', 'Version', v1, v2>), 
                                             h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                             (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Get_PSK_Exchange', 'NULL'>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 'NULL', 'NULL'>+
                                              <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                              <'PSK_Finish_Rsp', 'NULL'>)
                                            >),
                                          ~ltkR), 
                                     hmac(h(<
                                             (<'Algorithms', 'Algorithms', version, axR>+
                                              <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                              <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                              <'Get_Version', 'Get_Version', '1'>+
                                              <'Negotiate_Algorithms', 'Negotiate_Algorithms', version, AI>+
                                              <'Version', 'Version', v1, v2>), 
                                             h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                             (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                              <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                               initSessionId, nonce, publicKey>+
                                              <'Get_PSK_Exchange', 'NULL'>+
                                              <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                               ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                               'g'^~respPrivKey, 
                                               sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                       (<'Algorithms', 'Algorithms', version, axR>+
                                                        <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                        <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                        <'Get_Version', 'Get_Version', '1'>+
                                                        <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                         version, AI>+
                                                        <'Version', 'Version', v1, v2>), 
                                                       h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                       (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                        <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                         initSessionId, nonce, publicKey>+
                                                        <'Get_PSK_Exchange', 'NULL'>+
                                                        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                         ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                         'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                        <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                        <'PSK_Finish_Rsp', 'NULL'>)
                                                      >),
                                                    ~ltkR), 
                                               'NULL'>+
                                              <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                              <'PSK_Finish_Rsp', 'NULL'>)
                                            >),
                                          hkdf('cert',
                                               hkdf('cert', hmac(z, 'salt_o'),
                                                    h(<
                                                       (<'Algorithms', 'Algorithms', version, axR>+
                                                        <'Capabilities', 'Capabilities', version, ('PSK'+C2)>+
                                                        <'Get_Capabilities', 'Get_Capabilities', version, CI>+
                                                        <'Get_Version', 'Get_Version', '1'>+
                                                        <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                         version, AI>+
                                                        <'Version', 'Version', v1, v2>), 
                                                       h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                       (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                        <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                         initSessionId, nonce, publicKey>+
                                                        <'Get_PSK_Exchange', 'NULL'>+
                                                        <'Key_Exchange_Resp', 'Key_Exchange_Resp', version, 
                                                         ~respSessionId, 'No_Mutual_auth', ~respNonce, 
                                                         'g'^~respPrivKey, 
                                                         sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                                 (<'Algorithms', 'Algorithms', version, axR>+
                                                                  <'Capabilities', 'Capabilities', version, 
                                                                   ('PSK'+C2)>+
                                                                  <'Get_Capabilities', 'Get_Capabilities', 
                                                                   version, CI>+
                                                                  <'Get_Version', 'Get_Version', '1'>+
                                                                  <'Negotiate_Algorithms', 
                                                                   'Negotiate_Algorithms', version, AI>+
                                                                  <'Version', 'Version', v1, v2>), 
                                                                 h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                 (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                                  <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                                   version, initSessionId, nonce, publicKey>+
                                                                  <'Get_PSK_Exchange', 'NULL'>+
                                                                  <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                                   version, ~respSessionId, 'No_Mutual_auth', 
                                                                   ~respNonce, 'g'^~respPrivKey, 'NULL', 
                                                                   'NULL'>+
                                                                  <'PSK_Exchange_Resp', 'NULL'>+
                                                                  <'PSK_Finish', 'NULL'>+
                                                                  <'PSK_Finish_Rsp', 'NULL'>)
                                                                >),
                                                              ~ltkR), 
                                                         'NULL'>+
                                                        <'PSK_Exchange_Resp', 'NULL'>+<'PSK_Finish', 'NULL'>+
                                                        <'PSK_Finish_Rsp', 'NULL'>)
                                                      >),
                                                    'resp_hs_data'),
                                               version, 'finished'))
                                    >+
                                    <'PSK_Exchange_Resp', 'NULL'>+
                                    <'PSK_Finish', 'PSK_Finish', version, 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
                                  >)
                           ) @ #vk.58 )
                      case c_h
                      solve( !KU( h(sign(<~oidR, pk(~ltkR)>, ~rootkey)) ) @ #vk.79 )
                        case R_Digest_Response
                        solve( StateResp( ~tid, ~oidI.1, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                                          (optionsTranscript+<'Digest', dig>+<'Get_Digest', getdig>), somepkI,
                                          digestI, 'IDLE'
                               ) ▶₀ #vr.9 )
                          case R_Certificate_Response_case_2
                          solve( StateResp( ~tid, ~oidI.1, ~oidR, vx, ax, <V, C, A>, VCATranscript,
                                            (x+<'Certificate', tcert>+<'Digest', dig>+
                                             <'Get_Certificate', getcert>+<'Get_Digest', getdig>),
                                            somepkI, digestI, 'IDLE'
                                 ) ▶₀ #vr.12 )
                            case R_Spawn_new_Session
                            solve( splitEqs(0) )
                              case split_case_1
                              solve( !KU( hmac(publicKey^~respPrivKey, 'salt_o') ) @ #vk.79 )
                                case c_hmac
                                solve( !KU( publicKey^~respPrivKey ) @ #vk.115 )
                                  case R_KE_Response
                                  solve( !KU( ~respSessionId ) @ #vk.101 )
                                    case R_KE_Response
                                    solve( !KU( ~respNonce ) @ #vk.107 )
                                      case R_KE_Response
                                      solve( !KU( sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                          (<'Algorithms', 'Algorithms', version, ax>+
                                                           <'Capabilities', 'Capabilities', version, 
                                                            ('PSK'+C2)>+
                                                           <'Get_Capabilities', 'Get_Capabilities', version, 
                                                            CI>+
                                                           <'Get_Version', 'Get_Version', '1'>+
                                                           <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                            version, AI>+
                                                           <'Version', 'Version', v1, v2>), 
                                                          h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                          (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                           <'Get_Key_Exchange', 'Get_Key_Exchange', version, 
                                                            initSessionId, nonce, 'g'>+
                                                           <'Get_PSK_Exchange', 'NULL'>+
                                                           <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                            version, ~respSessionId, 'No_Mutual_auth', 
                                                            ~respNonce, 'g'^~respPrivKey, 'NULL', 'NULL'>+
                                                           <'PSK_Exchange_Resp', 'NULL'>+
                                                           <'PSK_Finish', 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>)
                                                         >),
                                                       ~ltkR)
                                             ) @ #vk.108 )
                                        case R_KE_Response
                                        solve( !KU( hmac(h(<
                                                            (<'Algorithms', 'Algorithms', version, ax>+
                                                             <'Capabilities', 'Capabilities', version, 
                                                              ('PSK'+C2)>+
                                                             <'Get_Capabilities', 'Get_Capabilities', 
                                                              version, CI>+
                                                             <'Get_Version', 'Get_Version', '1'>+
                                                             <'Negotiate_Algorithms', 'Negotiate_Algorithms', 
                                                              version, AI>+
                                                             <'Version', 'Version', v1, v2>), 
                                                            h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                            (<'Finish', 'NULL'>+<'Finish_Rsp', 'NULL'>+
                                                             <'Get_Key_Exchange', 'Get_Key_Exchange', 
                                                              version, initSessionId, nonce, 'g'>+
                                                             <'Get_PSK_Exchange', 'NULL'>+
                                                             <'Key_Exchange_Resp', 'Key_Exchange_Resp', 
                                                              version, ~respSessionId, 'No_Mutual_auth', 
                                                              ~respNonce, 'g'^~respPrivKey, 
                                                              sign(h(<version, 'Key_Exchange_Resp_Signing', 
                                                                      (
                                                                       <'Algorithms', 'Algorithms', version, 
                                                                        ax>+
                                                                       <'Capabilities', 'Capabilities', 
                                                                        version, ('PSK'+C2)>+
                                                                       <'Get_Capabilities', 
                                                                        'Get_Capabilities', version, CI>+
                                                                       <'Get_Version', 'Get_Version', '1'>+
                                                                       <'Negotiate_Algorithms', 
                                                                        'Negotiate_Algorithms', version, AI>+
                                                                       <'Version', 'Version', v1, v2>), 
                                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                      (<'Finish', 'NULL'>+
                                                                       <'Finish_Rsp', 'NULL'>+
                                                                       <'Get_Key_Exchange', 
                                                                        'Get_Key_Exchange', version, 
                                                                        initSessionId, nonce, 'g'>+
                                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                                       <'Key_Exchange_Resp', 
                                                                        'Key_Exchange_Resp', version, 
                                                                        ~respSessionId, 'No_Mutual_auth', 
                                                                        ~respNonce, 'g'^~respPrivKey, 'NULL', 
                                                                        'NULL'>+
                                                                       <'PSK_Exchange_Resp', 'NULL'>+
                                                                       <'PSK_Finish', 'NULL'>+
                                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                                     >),
                                                                   ~ltkR), 
                                                              'NULL'>+
                                                             <'PSK_Exchange_Resp', 'NULL'>+
                                                             <'PSK_Finish', 'NULL'>+<'PSK_Finish_Rsp', 'NULL'>
                                                            )
                                                           >),
                                                         hkdf('cert',
                                                              hkdf('cert', hmac('g'^~respPrivKey, 'salt_o'),
                                                                   h(<
                                                                      (
                                                                       <'Algorithms', 'Algorithms', version, 
                                                                        ax>+
                                                                       <'Capabilities', 'Capabilities', 
                                                                        version, ('PSK'+C2)>+
                                                                       <'Get_Capabilities', 
                                                                        'Get_Capabilities', version, CI>+
                                                                       <'Get_Version', 'Get_Version', '1'>+
                                                                       <'Negotiate_Algorithms', 
                                                                        'Negotiate_Algorithms', version, AI>+
                                                                       <'Version', 'Version', v1, v2>), 
                                                                      h(sign(<~oidR, pk(~ltkR)>, ~rootkey)), 
                                                                      (<'Finish', 'NULL'>+
                                                                       <'Finish_Rsp', 'NULL'>+
                                                                       <'Get_Key_Exchange', 
                                                                        'Get_Key_Exchange', version, 
                                                                        initSessionId, nonce, 'g'>+
                                                                       <'Get_PSK_Exchange', 'NULL'>+
                                                                       <'Key_Exchange_Resp', 
                                                                        'Key_Exchange_Resp', version, 
                                                                        ~respSessionId, 'No_Mutual_auth', 
                                                                        ~respNonce, 'g'^~respPrivKey, 
                                                                        sign(h(<version, 
                                                                                'Key_Exchange_Resp_Signing', 
                                                                                (
                                                                                 <'Algorithms', 'Algorithms', 
                                                                                  version, ax>+
                                                                                 <'Capabilities', 
                                                                                  'Capabilities', version, 
                                                                                  ('PSK'+C2)>+
                                                                                 <'Get_Capabilities', 
                                                                                  'Get_Capabilities', 
                                                                                  version, CI>+
                                                                                 <'Get_Version', 
                                                                                  'Get_Version', '1'>+
                                                                                 <'Negotiate_Algorithms', 
                                                                                  'Negotiate_Algorithms', 
                                                                                  version, AI>+
                                                                                 <'Version', 'Version', v1, v2
                                                                                 >
                                                                                ), 
                                                                                h(sign(<~oidR, pk(~ltkR)>,
                                                                                       ~rootkey)), 
                                                                                (<'Finish', 'NULL'>+
                                                                                 <'Finish_Rsp', 'NULL'>+
                                                                                 <'Get_Key_Exchange', 
                                                                                  'Get_Key_Exchange', 
                                                                                  version, initSessionId, 
                                                                                  nonce, 'g'>+
                                                                                 <'Get_PSK_Exchange', 'NULL'>+
                                                                                 <'Key_Exchange_Resp', 
                                                                                  'Key_Exchange_Resp', 
                                                                                  version, ~respSessionId, 
                                                                                  'No_Mutual_auth', 
                                                                                  ~respNonce, 
                                                                                  'g'^~respPrivKey, 'NULL', 
                                                                                  'NULL'>+
                                                                                 <'PSK_Exchange_Resp', 'NULL'
                                                                                 >+
                                                                                 <'PSK_Finish', 'NULL'>+
                                                                                 <'PSK_Finish_Rsp', 'NULL'>)
                                                                               >),
                                                                             ~ltkR), 
                                                                        'NULL'>+
                                                                       <'PSK_Exchange_Resp', 'NULL'>+
                                                                       <'PSK_Finish', 'NULL'>+
                                                                       <'PSK_Finish_Rsp', 'NULL'>)
                                                                     >),
                                                                   'resp_hs_data'),
                                                              version, 'finished'))
                                               ) @ #vk.112 )
                                          case R_KE_Response
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.1
Git revision: 6bb770468aaa36480fa9d067f7c2082adebe3a8c, branch: develop
Compiled at: 2023-06-22 12:04:00.141167702 UTC
*/

end